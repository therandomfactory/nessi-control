/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGTCL
#define SWIGTCL
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#if TCL_MAJOR_VERSION >= 8 && TCL_MINOR_VERSION >= 5
#define SWIG_TCL_HASHTABLE_INIT {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#else
#define SWIG_TCL_HASHTABLE_INIT {0}
#endif

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); return TCL_ERROR;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ANDORCAPS swig_types[0]
#define SWIGTYPE_p_AT_DDGLiteChannelId swig_types[1]
#define SWIGTYPE_p_AT_VersionInfoId swig_types[2]
#define SWIGTYPE_p_COLORDEMOSAICINFO swig_types[3]
#define SWIGTYPE_p_SYSTEMTIME swig_types[4]
#define SWIGTYPE_p_WHITEBALANCEINFO swig_types[5]
#define SWIGTYPE_p_char swig_types[6]
#define SWIGTYPE_p_float swig_types[7]
#define SWIGTYPE_p_int swig_types[8]
#define SWIGTYPE_p_p_void swig_types[9]
#define SWIGTYPE_p_unsigned_char swig_types[10]
#define SWIGTYPE_p_unsigned_int swig_types[11]
#define SWIGTYPE_p_unsigned_long_long swig_types[12]
#define SWIGTYPE_p_unsigned_short swig_types[13]
#define SWIGTYPE_p_ushortArray swig_types[14]
#define SWIGTYPE_std__ptrdiff_t swig_types[15]
#define SWIGTYPE_std__size_t swig_types[16]
static swig_type_info *swig_types[18];
static swig_module_info swig_module = {swig_types, 17, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Andorwrap_Init
#define SWIG_name    "andorwrap"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x030010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



typedef struct SWIGCDATA {
    char *data;
    size_t   len;
} SWIGCDATA;



extern "C"  {    


static SWIGCDATA cdata_void(void *ptr, size_t nelements)



{
  SWIGCDATA d;
  d.data = (char *) ptr;



  d.len  = nelements;

   return d;
}

}



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long long *val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (unsigned long) v;
    return SWIG_OK;
  } else {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULLONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  return SWIG_TypeError;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


typedef unsigned short ushortArray;

SWIGINTERN ushortArray *new_ushortArray(size_t nelements){
    return (new unsigned short[nelements]);
  }
SWIGINTERN void delete_ushortArray(ushortArray *self){
    delete[] self;
  }
SWIGINTERN unsigned short ushortArray_getitem(ushortArray *self,size_t index){
    return self[index];
  }

SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

SWIGINTERN void ushortArray_setitem(ushortArray *self,size_t index,unsigned short value){
    self[index] = value;
  }
SWIGINTERN unsigned short *ushortArray_cast(ushortArray *self){
    return self;
  }
SWIGINTERN ushortArray *ushortArray_frompointer(unsigned short *t){
    return static_cast< ushortArray * >(t);
  }

#include "atmcdLXd.h"
typedef short unsigned int uint16_t;


#include <string>


#include <stdexcept>


#include <algorithm>


#include <vector>

Tcl_Obj* SwigString_FromString(const std::string &s) {
    return Tcl_NewStringObj(s.data(), (int)s.length());
}

int Tcl_GetBoolFromObj(Tcl_Interp *interp, Tcl_Obj *o, bool *val) {
  int v;
  int res = Tcl_GetBooleanFromObj(interp, o, &v);
  if (res == TCL_OK) {
    *val = v ? true : false;
  }
  return res;  
}
 
int SwigString_AsString(Tcl_Interp *interp, Tcl_Obj *o, std::string *val) {
    int len;
    const char* temp = Tcl_GetStringFromObj(o, &len);
    if (temp == NULL)
        return TCL_ERROR;
    val->assign(temp, len);
    return TCL_OK;
}

// behaviour of this is such as the real Tcl_GetIntFromObj
template <typename Type>
int SwigInt_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int temp_val, return_val;
    return_val = Tcl_GetIntFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}

// behaviour of this is such as the real Tcl_GetDoubleFromObj
template <typename Type>
int SwigDouble_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int return_val;
    double temp_val;
    return_val = Tcl_GetDoubleFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}



#define SWIG_FILEatmcdLXd_WITH_INIT


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}





#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99, but a function in namespace std for C++11. */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
#  define SWIG_isfinite(X) (std::isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# elif defined(__GNUC__)
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_cdata(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void *arg1 = (void *) 0 ;
  size_t arg2 = (size_t) 1 ;
  int res1 ;
  size_t val2 ;
  int ecode2 = 0 ;
  SWIGCDATA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o|o:cdata ptr ?nelements? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdata" "', argument " "1"" of type '" "void *""'"); 
  }
  if (objc > 2) {
    ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cdata" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  result = cdata_void(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize((&result)->data,(&result)->len));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_memmove(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:memmove data indata ?inlen? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memmove" "', argument " "1"" of type '" "void *""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memmove" "', argument " "2"" of type '" "void const *""'");
  }
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< size_t >(size2);
  memmove(arg1,(void const *)arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ushortArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ushortArray *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ushortArray nelements ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ushortArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (ushortArray *)new_ushortArray(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ushortArray,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ushortArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ushortArray self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ushortArray" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  delete_ushortArray(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_getitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ushortArray_getitem self index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_getitem" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ushortArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (unsigned short)ushortArray_getitem(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_setitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ushortArray_setitem self index value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_setitem" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ushortArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ushortArray_setitem" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  ushortArray_setitem(arg1,arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_cast(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ushortArray *arg1 = (ushortArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ushortArray_cast self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ushortArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_cast" "', argument " "1"" of type '" "ushortArray *""'"); 
  }
  arg1 = reinterpret_cast< ushortArray * >(argp1);
  result = (unsigned short *)ushortArray_cast(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ushortArray_frompointer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ushortArray *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ushortArray_frompointer t ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortArray_frompointer" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  result = (ushortArray *)ushortArray_frompointer(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ushortArray,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ushortArray(void *obj) {
ushortArray *arg1 = (ushortArray *) obj;
delete_ushortArray(arg1);
}
static swig_method swig_ushortArray_methods[] = {
    {"getitem", _wrap_ushortArray_getitem}, 
    {"setitem", _wrap_ushortArray_setitem}, 
    {"cast", _wrap_ushortArray_cast}, 
    {0,0}
};
static swig_attribute swig_ushortArray_attributes[] = {
    {0,0,0}
};
static swig_class *swig_ushortArray_bases[] = {0};
static const char * swig_ushortArray_base_names[] = {0};
static swig_class _wrap_class_ushortArray = { "ushortArray", &SWIGTYPE_p_ushortArray,_wrap_new_ushortArray, swig_delete_ushortArray, swig_ushortArray_methods, swig_ushortArray_attributes, swig_ushortArray_bases,swig_ushortArray_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_SYSTEMTIME_wYear_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wYear_set self wYear ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wYear_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wYear_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wYear = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wYear_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wYear_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wYear_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wYear);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wMonth_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wMonth_set self wMonth ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wMonth_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wMonth_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wMonth = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wMonth_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wMonth_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wMonth_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wMonth);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wDayOfWeek_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wDayOfWeek_set self wDayOfWeek ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wDayOfWeek_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wDayOfWeek_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wDayOfWeek = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wDayOfWeek_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wDayOfWeek_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wDayOfWeek_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wDayOfWeek);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wDay_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wDay_set self wDay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wDay_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wDay_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wDay = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wDay_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wDay_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wDay_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wDay);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wHour_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wHour_set self wHour ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wHour_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wHour_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wHour = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wHour_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wHour_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wHour_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wHour);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wMinute_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wMinute_set self wMinute ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wMinute_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wMinute_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wMinute = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wMinute_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wMinute_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wMinute_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wMinute);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wSecond_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wSecond_set self wSecond ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wSecond_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wSecond_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wSecond = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wSecond_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wSecond_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wSecond_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wSecond);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wMilliseconds_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SYSTEMTIME_wMilliseconds_set self wMilliseconds ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wMilliseconds_set" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SYSTEMTIME_wMilliseconds_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->wMilliseconds = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SYSTEMTIME_wMilliseconds_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SYSTEMTIME_wMilliseconds_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SYSTEMTIME_wMilliseconds_get" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  result = (unsigned short) ((arg1)->wMilliseconds);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SYSTEMTIME(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SYSTEMTIME ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (SYSTEMTIME *)new SYSTEMTIME();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SYSTEMTIME,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SYSTEMTIME(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SYSTEMTIME self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SYSTEMTIME" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SYSTEMTIME(void *obj) {
SYSTEMTIME *arg1 = (SYSTEMTIME *) obj;
delete arg1;
}
static swig_method swig_SYSTEMTIME_methods[] = {
    {0,0}
};
static swig_attribute swig_SYSTEMTIME_attributes[] = {
    { "-wYear",_wrap_SYSTEMTIME_wYear_get, _wrap_SYSTEMTIME_wYear_set},
    { "-wMonth",_wrap_SYSTEMTIME_wMonth_get, _wrap_SYSTEMTIME_wMonth_set},
    { "-wDayOfWeek",_wrap_SYSTEMTIME_wDayOfWeek_get, _wrap_SYSTEMTIME_wDayOfWeek_set},
    { "-wDay",_wrap_SYSTEMTIME_wDay_get, _wrap_SYSTEMTIME_wDay_set},
    { "-wHour",_wrap_SYSTEMTIME_wHour_get, _wrap_SYSTEMTIME_wHour_set},
    { "-wMinute",_wrap_SYSTEMTIME_wMinute_get, _wrap_SYSTEMTIME_wMinute_set},
    { "-wSecond",_wrap_SYSTEMTIME_wSecond_get, _wrap_SYSTEMTIME_wSecond_set},
    { "-wMilliseconds",_wrap_SYSTEMTIME_wMilliseconds_get, _wrap_SYSTEMTIME_wMilliseconds_set},
    {0,0,0}
};
static swig_class *swig_SYSTEMTIME_bases[] = {0};
static const char * swig_SYSTEMTIME_base_names[] = {0};
static swig_class _wrap_class_SYSTEMTIME = { "SYSTEMTIME", &SWIGTYPE_p_SYSTEMTIME,_wrap_new_SYSTEMTIME, swig_delete_SYSTEMTIME, swig_SYSTEMTIME_methods, swig_SYSTEMTIME_attributes, swig_SYSTEMTIME_bases,swig_SYSTEMTIME_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_AndorCapabilities_ulSize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulSize_set self ulSize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulSize_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulSize_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulSize = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulSize_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulSize);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulAcqModes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulAcqModes_set self ulAcqModes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulAcqModes_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulAcqModes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulAcqModes = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulAcqModes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulAcqModes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulAcqModes_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulAcqModes);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulReadModes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulReadModes_set self ulReadModes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulReadModes_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulReadModes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulReadModes = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulReadModes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulReadModes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulReadModes_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulReadModes);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulTriggerModes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulTriggerModes_set self ulTriggerModes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulTriggerModes_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulTriggerModes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulTriggerModes = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulTriggerModes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulTriggerModes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulTriggerModes_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulTriggerModes);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulCameraType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulCameraType_set self ulCameraType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulCameraType_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulCameraType_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulCameraType = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulCameraType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulCameraType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulCameraType_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulCameraType);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulPixelMode_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulPixelMode_set self ulPixelMode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulPixelMode_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulPixelMode_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulPixelMode = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulPixelMode_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulPixelMode_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulPixelMode_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulPixelMode);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulSetFunctions_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulSetFunctions_set self ulSetFunctions ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulSetFunctions_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulSetFunctions_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulSetFunctions = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulSetFunctions_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulSetFunctions_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulSetFunctions_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulSetFunctions);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulGetFunctions_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulGetFunctions_set self ulGetFunctions ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulGetFunctions_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulGetFunctions_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulGetFunctions = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulGetFunctions_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulGetFunctions_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulGetFunctions_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulGetFunctions);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulFeatures_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulFeatures_set self ulFeatures ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulFeatures_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulFeatures_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulFeatures = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulFeatures_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulFeatures_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulFeatures_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulFeatures);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulPCICard_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulPCICard_set self ulPCICard ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulPCICard_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulPCICard_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulPCICard = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulPCICard_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulPCICard_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulPCICard_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulPCICard);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulEMGainCapability_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulEMGainCapability_set self ulEMGainCapability ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulEMGainCapability_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulEMGainCapability_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulEMGainCapability = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulEMGainCapability_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulEMGainCapability_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulEMGainCapability_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulEMGainCapability);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulFTReadModes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:AndorCapabilities_ulFTReadModes_set self ulFTReadModes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulFTReadModes_set" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AndorCapabilities_ulFTReadModes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->ulFTReadModes = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_AndorCapabilities_ulFTReadModes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:AndorCapabilities_ulFTReadModes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AndorCapabilities_ulFTReadModes_get" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  result = (unsigned int) ((arg1)->ulFTReadModes);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_AndorCapabilities(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_AndorCapabilities ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (ANDORCAPS *)new ANDORCAPS();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ANDORCAPS,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_AndorCapabilities(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ANDORCAPS *arg1 = (ANDORCAPS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_AndorCapabilities self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AndorCapabilities" "', argument " "1"" of type '" "ANDORCAPS *""'"); 
  }
  arg1 = reinterpret_cast< ANDORCAPS * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_AndorCapabilities(void *obj) {
ANDORCAPS *arg1 = (ANDORCAPS *) obj;
delete arg1;
}
static swig_method swig_ANDORCAPS_methods[] = {
    {0,0}
};
static swig_attribute swig_ANDORCAPS_attributes[] = {
    { "-ulSize",_wrap_AndorCapabilities_ulSize_get, _wrap_AndorCapabilities_ulSize_set},
    { "-ulAcqModes",_wrap_AndorCapabilities_ulAcqModes_get, _wrap_AndorCapabilities_ulAcqModes_set},
    { "-ulReadModes",_wrap_AndorCapabilities_ulReadModes_get, _wrap_AndorCapabilities_ulReadModes_set},
    { "-ulTriggerModes",_wrap_AndorCapabilities_ulTriggerModes_get, _wrap_AndorCapabilities_ulTriggerModes_set},
    { "-ulCameraType",_wrap_AndorCapabilities_ulCameraType_get, _wrap_AndorCapabilities_ulCameraType_set},
    { "-ulPixelMode",_wrap_AndorCapabilities_ulPixelMode_get, _wrap_AndorCapabilities_ulPixelMode_set},
    { "-ulSetFunctions",_wrap_AndorCapabilities_ulSetFunctions_get, _wrap_AndorCapabilities_ulSetFunctions_set},
    { "-ulGetFunctions",_wrap_AndorCapabilities_ulGetFunctions_get, _wrap_AndorCapabilities_ulGetFunctions_set},
    { "-ulFeatures",_wrap_AndorCapabilities_ulFeatures_get, _wrap_AndorCapabilities_ulFeatures_set},
    { "-ulPCICard",_wrap_AndorCapabilities_ulPCICard_get, _wrap_AndorCapabilities_ulPCICard_set},
    { "-ulEMGainCapability",_wrap_AndorCapabilities_ulEMGainCapability_get, _wrap_AndorCapabilities_ulEMGainCapability_set},
    { "-ulFTReadModes",_wrap_AndorCapabilities_ulFTReadModes_get, _wrap_AndorCapabilities_ulFTReadModes_set},
    {0,0,0}
};
static swig_class *swig_ANDORCAPS_bases[] = {0};
static const char * swig_ANDORCAPS_base_names[] = {0};
static swig_class _wrap_class_ANDORCAPS = { "AndorCapabilities", &SWIGTYPE_p_ANDORCAPS,_wrap_new_AndorCapabilities, swig_delete_AndorCapabilities, swig_ANDORCAPS_methods, swig_ANDORCAPS_attributes, swig_ANDORCAPS_bases,swig_ANDORCAPS_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_ColorDemosaicInfo_iX_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ColorDemosaicInfo_iX_set self iX ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iX_set" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorDemosaicInfo_iX_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iX = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iX_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ColorDemosaicInfo_iX_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iX_get" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  result = (int) ((arg1)->iX);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iY_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ColorDemosaicInfo_iY_set self iY ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iY_set" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorDemosaicInfo_iY_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iY = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iY_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ColorDemosaicInfo_iY_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iY_get" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  result = (int) ((arg1)->iY);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iAlgorithm_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ColorDemosaicInfo_iAlgorithm_set self iAlgorithm ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iAlgorithm_set" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorDemosaicInfo_iAlgorithm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iAlgorithm = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iAlgorithm_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ColorDemosaicInfo_iAlgorithm_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iAlgorithm_get" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  result = (int) ((arg1)->iAlgorithm);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iXPhase_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ColorDemosaicInfo_iXPhase_set self iXPhase ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iXPhase_set" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorDemosaicInfo_iXPhase_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iXPhase = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iXPhase_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ColorDemosaicInfo_iXPhase_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iXPhase_get" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  result = (int) ((arg1)->iXPhase);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iYPhase_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ColorDemosaicInfo_iYPhase_set self iYPhase ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iYPhase_set" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorDemosaicInfo_iYPhase_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iYPhase = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iYPhase_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ColorDemosaicInfo_iYPhase_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iYPhase_get" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  result = (int) ((arg1)->iYPhase);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iBackground_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ColorDemosaicInfo_iBackground_set self iBackground ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iBackground_set" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorDemosaicInfo_iBackground_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iBackground = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ColorDemosaicInfo_iBackground_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ColorDemosaicInfo_iBackground_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorDemosaicInfo_iBackground_get" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  result = (int) ((arg1)->iBackground);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ColorDemosaicInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ColorDemosaicInfo ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (COLORDEMOSAICINFO *)new COLORDEMOSAICINFO();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_COLORDEMOSAICINFO,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ColorDemosaicInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ColorDemosaicInfo self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_COLORDEMOSAICINFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorDemosaicInfo" "', argument " "1"" of type '" "COLORDEMOSAICINFO *""'"); 
  }
  arg1 = reinterpret_cast< COLORDEMOSAICINFO * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ColorDemosaicInfo(void *obj) {
COLORDEMOSAICINFO *arg1 = (COLORDEMOSAICINFO *) obj;
delete arg1;
}
static swig_method swig_COLORDEMOSAICINFO_methods[] = {
    {0,0}
};
static swig_attribute swig_COLORDEMOSAICINFO_attributes[] = {
    { "-iX",_wrap_ColorDemosaicInfo_iX_get, _wrap_ColorDemosaicInfo_iX_set},
    { "-iY",_wrap_ColorDemosaicInfo_iY_get, _wrap_ColorDemosaicInfo_iY_set},
    { "-iAlgorithm",_wrap_ColorDemosaicInfo_iAlgorithm_get, _wrap_ColorDemosaicInfo_iAlgorithm_set},
    { "-iXPhase",_wrap_ColorDemosaicInfo_iXPhase_get, _wrap_ColorDemosaicInfo_iXPhase_set},
    { "-iYPhase",_wrap_ColorDemosaicInfo_iYPhase_get, _wrap_ColorDemosaicInfo_iYPhase_set},
    { "-iBackground",_wrap_ColorDemosaicInfo_iBackground_get, _wrap_ColorDemosaicInfo_iBackground_set},
    {0,0,0}
};
static swig_class *swig_COLORDEMOSAICINFO_bases[] = {0};
static const char * swig_COLORDEMOSAICINFO_base_names[] = {0};
static swig_class _wrap_class_COLORDEMOSAICINFO = { "ColorDemosaicInfo", &SWIGTYPE_p_COLORDEMOSAICINFO,_wrap_new_ColorDemosaicInfo, swig_delete_ColorDemosaicInfo, swig_COLORDEMOSAICINFO_methods, swig_COLORDEMOSAICINFO_attributes, swig_COLORDEMOSAICINFO_bases,swig_COLORDEMOSAICINFO_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_WhiteBalanceInfo_iSize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iSize_set self iSize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iSize_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iSize = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iSize_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iSize);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iX_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iX_set self iX ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iX_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iX_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iX = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iX_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iX_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iX_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iX);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iY_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iY_set self iY ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iY_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iY_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iY = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iY_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iY_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iY_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iY);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iAlgorithm_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iAlgorithm_set self iAlgorithm ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iAlgorithm_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iAlgorithm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iAlgorithm = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iAlgorithm_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iAlgorithm_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iAlgorithm_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iAlgorithm);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_left_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iROI_left_set self iROI_left ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_left_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iROI_left_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iROI_left = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_left_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iROI_left_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_left_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iROI_left);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_right_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iROI_right_set self iROI_right ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_right_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iROI_right_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iROI_right = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_right_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iROI_right_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_right_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iROI_right);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_top_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iROI_top_set self iROI_top ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_top_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iROI_top_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iROI_top = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_top_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iROI_top_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_top_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iROI_top);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_bottom_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iROI_bottom_set self iROI_bottom ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_bottom_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iROI_bottom_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iROI_bottom = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iROI_bottom_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iROI_bottom_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iROI_bottom_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iROI_bottom);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iOperation_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WhiteBalanceInfo_iOperation_set self iOperation ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iOperation_set" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WhiteBalanceInfo_iOperation_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->iOperation = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalanceInfo_iOperation_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WhiteBalanceInfo_iOperation_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalanceInfo_iOperation_get" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  result = (int) ((arg1)->iOperation);
  {
    Tcl_SetIntObj((Tcl_GetObjResult(interp)),(int) result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_WhiteBalanceInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_WhiteBalanceInfo ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (WHITEBALANCEINFO *)new WHITEBALANCEINFO();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_WHITEBALANCEINFO,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_WhiteBalanceInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_WhiteBalanceInfo self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_WHITEBALANCEINFO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WhiteBalanceInfo" "', argument " "1"" of type '" "WHITEBALANCEINFO *""'"); 
  }
  arg1 = reinterpret_cast< WHITEBALANCEINFO * >(argp1);
  {
    try {
      delete arg1;
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_WhiteBalanceInfo(void *obj) {
WHITEBALANCEINFO *arg1 = (WHITEBALANCEINFO *) obj;
delete arg1;
}
static swig_method swig_WHITEBALANCEINFO_methods[] = {
    {0,0}
};
static swig_attribute swig_WHITEBALANCEINFO_attributes[] = {
    { "-iSize",_wrap_WhiteBalanceInfo_iSize_get, _wrap_WhiteBalanceInfo_iSize_set},
    { "-iX",_wrap_WhiteBalanceInfo_iX_get, _wrap_WhiteBalanceInfo_iX_set},
    { "-iY",_wrap_WhiteBalanceInfo_iY_get, _wrap_WhiteBalanceInfo_iY_set},
    { "-iAlgorithm",_wrap_WhiteBalanceInfo_iAlgorithm_get, _wrap_WhiteBalanceInfo_iAlgorithm_set},
    { "-iROI_left",_wrap_WhiteBalanceInfo_iROI_left_get, _wrap_WhiteBalanceInfo_iROI_left_set},
    { "-iROI_right",_wrap_WhiteBalanceInfo_iROI_right_get, _wrap_WhiteBalanceInfo_iROI_right_set},
    { "-iROI_top",_wrap_WhiteBalanceInfo_iROI_top_get, _wrap_WhiteBalanceInfo_iROI_top_set},
    { "-iROI_bottom",_wrap_WhiteBalanceInfo_iROI_bottom_get, _wrap_WhiteBalanceInfo_iROI_bottom_set},
    { "-iOperation",_wrap_WhiteBalanceInfo_iOperation_get, _wrap_WhiteBalanceInfo_iOperation_set},
    {0,0,0}
};
static swig_class *swig_WHITEBALANCEINFO_bases[] = {0};
static const char * swig_WHITEBALANCEINFO_base_names[] = {0};
static swig_class _wrap_class_WHITEBALANCEINFO = { "WhiteBalanceInfo", &SWIGTYPE_p_WHITEBALANCEINFO,_wrap_new_WhiteBalanceInfo, swig_delete_WhiteBalanceInfo, swig_WHITEBALANCEINFO_methods, swig_WHITEBALANCEINFO_attributes, swig_WHITEBALANCEINFO_bases,swig_WHITEBALANCEINFO_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_AbortAcquisition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":AbortAcquisition ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)AbortAcquisition();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CancelWait(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":CancelWait ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)CancelWait();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CoolerOFF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":CoolerOFF ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)CoolerOFF();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CoolerON(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":CoolerON ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)CoolerON();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DemosaicImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  ColorDemosaicInfo *arg5 = (ColorDemosaicInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:DemosaicImage grey red green blue info ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DemosaicImage" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DemosaicImage" "', argument " "2"" of type '" "unsigned short *""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DemosaicImage" "', argument " "3"" of type '" "unsigned short *""'"); 
  }
  arg3 = reinterpret_cast< unsigned short * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DemosaicImage" "', argument " "4"" of type '" "unsigned short *""'"); 
  }
  arg4 = reinterpret_cast< unsigned short * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_COLORDEMOSAICINFO, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DemosaicImage" "', argument " "5"" of type '" "ColorDemosaicInfo *""'"); 
  }
  arg5 = reinterpret_cast< ColorDemosaicInfo * >(argp5);
  {
    try {
      result = (unsigned int)DemosaicImage(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnableKeepCleans(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EnableKeepCleans iMode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EnableKeepCleans" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)EnableKeepCleans(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnableSensorCompensation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EnableSensorCompensation iMode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EnableSensorCompensation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)EnableSensorCompensation(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetIRIGModulation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetIRIGModulation mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetIRIGModulation" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  {
    try {
      result = (unsigned int)SetIRIGModulation(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FreeInternalMemory(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":FreeInternalMemory ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)FreeInternalMemory();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAcquiredData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAcquiredData arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAcquiredData" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetAcquiredData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetAcquiredData(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAcquiredData16(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAcquiredData16 arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAcquiredData16" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetAcquiredData16" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetAcquiredData16(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAcquiredFloatData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAcquiredFloatData arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAcquiredFloatData" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetAcquiredFloatData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetAcquiredFloatData(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAcquisitionProgress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAcquisitionProgress acc series ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAcquisitionProgress" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetAcquisitionProgress" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetAcquisitionProgress(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAcquisitionTimings(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetAcquisitionTimings exposure accumulate kinetic ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAcquisitionTimings" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetAcquisitionTimings" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetAcquisitionTimings" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  {
    try {
      result = (unsigned int)GetAcquisitionTimings(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAdjustedRingExposureTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAdjustedRingExposureTimes inumTimes fptimes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetAdjustedRingExposureTimes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetAdjustedRingExposureTimes" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetAdjustedRingExposureTimes(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAllDMAData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAllDMAData arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetAllDMAData" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetAllDMAData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetAllDMAData(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAmpDesc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetAmpDesc index name length ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetAmpDesc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetAmpDesc" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetAmpDesc" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)GetAmpDesc(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetAmpMaxSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetAmpMaxSpeed index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetAmpMaxSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetAmpMaxSpeed" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetAmpMaxSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetBackground(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetBackground arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetBackground" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetBackground" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetBackground(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetBitDepth(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetBitDepth channel depth ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetBitDepth" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetBitDepth" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetBitDepth(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCameraHandle(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetCameraHandle cameraIndex cameraHandle ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetCameraHandle" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetCameraHandle" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetCameraHandle(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCameraInformation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetCameraInformation index information ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetCameraInformation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetCameraInformation" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetCameraInformation(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCapabilities(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AndorCapabilities *arg1 = (AndorCapabilities *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetCapabilities caps ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ANDORCAPS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetCapabilities" "', argument " "1"" of type '" "AndorCapabilities *""'"); 
  }
  arg1 = reinterpret_cast< AndorCapabilities * >(argp1);
  {
    try {
      result = (unsigned int)GetCapabilities(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetControllerCardModel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetControllerCardModel controllerCardModel ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetControllerCardModel" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)GetControllerCardModel(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCountConvertWavelengthRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetCountConvertWavelengthRange minval maxval ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetCountConvertWavelengthRange" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetCountConvertWavelengthRange" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetCountConvertWavelengthRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetCurrentCamera(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetCurrentCamera cameraHandle ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetCurrentCamera" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetCurrentCamera(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDetector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetDetector xpixels ypixels ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDetector" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetDetector" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetDetector(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDICameraInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void *arg1 = (void *) 0 ;
  int res1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetDICameraInfo info ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDICameraInfo" "', argument " "1"" of type '" "void *""'"); 
  }
  {
    try {
      result = (unsigned int)GetDICameraInfo(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetEMGainRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetEMGainRange low high ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetEMGainRange" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetEMGainRange" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetEMGainRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetFastestRecommendedVSSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetFastestRecommendedVSSpeed index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetFastestRecommendedVSSpeed" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFastestRecommendedVSSpeed" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetFastestRecommendedVSSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetFKVShiftSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetFKVShiftSpeed index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetFKVShiftSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFKVShiftSpeed" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetFKVShiftSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetFKVShiftSpeedF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetFKVShiftSpeedF index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetFKVShiftSpeedF" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetFKVShiftSpeedF" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetFKVShiftSpeedF(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetHardwareVersion(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:GetHardwareVersion PCB Decode dummy1 dummy2 CameraFirmwareVersion CameraFirmwareBuild ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetHardwareVersion" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetHardwareVersion" "', argument " "2"" of type '" "unsigned int *""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetHardwareVersion" "', argument " "3"" of type '" "unsigned int *""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetHardwareVersion" "', argument " "4"" of type '" "unsigned int *""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetHardwareVersion" "', argument " "5"" of type '" "unsigned int *""'"); 
  }
  arg5 = reinterpret_cast< unsigned int * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetHardwareVersion" "', argument " "6"" of type '" "unsigned int *""'"); 
  }
  arg6 = reinterpret_cast< unsigned int * >(argp6);
  {
    try {
      result = (unsigned int)GetHardwareVersion(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetHeadModel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetHeadModel name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetHeadModel" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)GetHeadModel(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetHorizontalSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetHorizontalSpeed index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetHorizontalSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetHorizontalSpeed" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetHorizontalSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetHSSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetHSSpeed channel typ index speed ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetHSSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetHSSpeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetHSSpeed" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetHSSpeed" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  {
    try {
      result = (unsigned int)GetHSSpeed(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetHVflag(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetHVflag bFlag ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetHVflag" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetHVflag(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetID(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetID devNum id ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetID" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetID" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetID(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetImageFlip(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetImageFlip iHFlip iVFlip ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImageFlip" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetImageFlip" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetImageFlip(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetImages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:GetImages first last arr size validfirst validlast ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetImages" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetImages" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetImages" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetImages" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetImages" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetImages" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (unsigned int)GetImages(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetImages16(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned int arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:GetImages16 first last arr size validfirst validlast ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetImages16" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetImages16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetImages16" "', argument " "3"" of type '" "unsigned short *""'"); 
  }
  arg3 = reinterpret_cast< unsigned short * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetImages16" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetImages16" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetImages16" "', argument " "6"" of type '" "int *""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      result = (unsigned int)GetImages16(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetImagesPerDMA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetImagesPerDMA images ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetImagesPerDMA" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  {
    try {
      result = (unsigned int)GetImagesPerDMA(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMaximumBinning(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetMaximumBinning ReadMode HorzVert MaxBinning ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetMaximumBinning" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetMaximumBinning" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetMaximumBinning" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (unsigned int)GetMaximumBinning(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMCPGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetMCPGain piGain ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMCPGain" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetMCPGain(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMCPGainRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetMCPGainRange iLow iHigh ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMCPGainRange" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetMCPGainRange" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetMCPGainRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMCPGainTable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  float *arg3 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetMCPGainTable iNum piGain pfPhotoepc ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetMCPGainTable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetMCPGainTable" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetMCPGainTable" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  {
    try {
      result = (unsigned int)GetMCPGainTable(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMCPVoltage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetMCPVoltage iVoltage ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMCPVoltage" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetMCPVoltage(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMostRecentColorImage16(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  unsigned short *arg5 = (unsigned short *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:GetMostRecentColorImage16 size algorithm red green blue ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetMostRecentColorImage16" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetMostRecentColorImage16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetMostRecentColorImage16" "', argument " "3"" of type '" "unsigned short *""'"); 
  }
  arg3 = reinterpret_cast< unsigned short * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetMostRecentColorImage16" "', argument " "4"" of type '" "unsigned short *""'"); 
  }
  arg4 = reinterpret_cast< unsigned short * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetMostRecentColorImage16" "', argument " "5"" of type '" "unsigned short *""'"); 
  }
  arg5 = reinterpret_cast< unsigned short * >(argp5);
  {
    try {
      result = (unsigned int)GetMostRecentColorImage16(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMostRecentImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetMostRecentImage arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMostRecentImage" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetMostRecentImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetMostRecentImage(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMostRecentImage16(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetMostRecentImage16 arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMostRecentImage16" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetMostRecentImage16" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetMostRecentImage16(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMetaDataInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SYSTEMTIME *arg1 = (SYSTEMTIME *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetMetaDataInfo TimeOfStart pfTimeFromStart index ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SYSTEMTIME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMetaDataInfo" "', argument " "1"" of type '" "SYSTEMTIME *""'"); 
  }
  arg1 = reinterpret_cast< SYSTEMTIME * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetMetaDataInfo" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetMetaDataInfo" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (unsigned int)GetMetaDataInfo(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetMSTimingsEnabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":GetMSTimingsEnabled ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)GetMSTimingsEnabled();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNewData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNewData arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNewData" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNewData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetNewData(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNewData16(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNewData16 arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNewData16" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNewData16" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetNewData16(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNewFloatData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNewFloatData arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNewFloatData" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNewFloatData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetNewFloatData(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNumberAvailableImages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNumberAvailableImages first last ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNumberAvailableImages" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetNumberAvailableImages" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetNumberAvailableImages(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNumberDDGExternalOutputs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetNumberDDGExternalOutputs puiCount ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNumberDDGExternalOutputs" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  {
    try {
      result = (unsigned int)GetNumberDDGExternalOutputs(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNumberHSSpeeds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetNumberHSSpeeds channel typ speeds ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNumberHSSpeeds" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNumberHSSpeeds" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetNumberHSSpeeds" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (unsigned int)GetNumberHSSpeeds(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNumberMissedExternalTriggers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetNumberMissedExternalTriggers first last arr size ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetNumberMissedExternalTriggers" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetNumberMissedExternalTriggers" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetNumberMissedExternalTriggers" "', argument " "3"" of type '" "unsigned short *""'"); 
  }
  arg3 = reinterpret_cast< unsigned short * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetNumberMissedExternalTriggers" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (unsigned int)GetNumberMissedExternalTriggers(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIRIGData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetIRIGData _uc_irigData _ui_index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetIRIGData" "', argument " "1"" of type '" "unsigned char *""'"); 
  }
  arg1 = reinterpret_cast< unsigned char * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetIRIGData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetIRIGData(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNumberNewImages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetNumberNewImages first last ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNumberNewImages" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetNumberNewImages" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetNumberNewImages(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetNumberPhotonCountingDivisions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetNumberPhotonCountingDivisions noOfDivisions ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetNumberPhotonCountingDivisions" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  {
    try {
      result = (unsigned int)GetNumberPhotonCountingDivisions(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetOldestImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetOldestImage arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetOldestImage" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetOldestImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetOldestImage(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetOldestImage16(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetOldestImage16 arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetOldestImage16" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetOldestImage16" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)GetOldestImage16(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPhosphorStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetPhosphorStatus piFlag ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetPhosphorStatus" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetPhosphorStatus(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPhysicalDMAAddress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetPhysicalDMAAddress Address1 Address2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetPhysicalDMAAddress" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetPhysicalDMAAddress" "', argument " "2"" of type '" "unsigned int *""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  {
    try {
      result = (unsigned int)GetPhysicalDMAAddress(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPixelSize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetPixelSize xSize ySize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetPixelSize" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetPixelSize" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetPixelSize(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPreAmpGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetPreAmpGain index gain ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPreAmpGain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetPreAmpGain" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetPreAmpGain(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetPreAmpGainText(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetPreAmpGainText index name length ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetPreAmpGainText" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetPreAmpGainText" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetPreAmpGainText" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)GetPreAmpGainText(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetDualExposureTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetDualExposureTimes exposure1 exposure2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDualExposureTimes" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetDualExposureTimes" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetDualExposureTimes(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetQE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  float *arg4 = (float *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetQE sensor wavelength mode QE ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetQE" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetQE" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetQE" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetQE" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  {
    try {
      result = (unsigned int)GetQE(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetRegisterDump(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetRegisterDump mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRegisterDump" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetRegisterDump(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetRelativeImageTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned long long *arg3 = (unsigned long long *) 0 ;
  unsigned int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetRelativeImageTimes first last arr size ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetRelativeImageTimes" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetRelativeImageTimes" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_long_long, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetRelativeImageTimes" "', argument " "3"" of type '" "unsigned long long *""'"); 
  }
  arg3 = reinterpret_cast< unsigned long long * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetRelativeImageTimes" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (unsigned int)GetRelativeImageTimes(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetRingExposureRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetRingExposureRange fpMin fpMax ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetRingExposureRange" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetRingExposureRange" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetRingExposureRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSDK3Handle(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetSDK3Handle Handle ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSDK3Handle" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetSDK3Handle(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSensitivity(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:GetSensitivity channel horzShift amplifier pa sensitivity ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetSensitivity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetSensitivity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetSensitivity" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetSensitivity" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetSensitivity" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  {
    try {
      result = (unsigned int)GetSensitivity(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetShutterMinTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetShutterMinTimes minclosingtime minopeningtime ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetShutterMinTimes" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetShutterMinTimes" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetShutterMinTimes(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSizeOfCircularBuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetSizeOfCircularBuffer index ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSizeOfCircularBuffer" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetSizeOfCircularBuffer(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSlotBusDeviceFunction(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetSlotBusDeviceFunction dwslot dwBus dwDevice dwFunction ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSlotBusDeviceFunction" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetSlotBusDeviceFunction" "', argument " "2"" of type '" "unsigned int *""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSlotBusDeviceFunction" "', argument " "3"" of type '" "unsigned int *""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetSlotBusDeviceFunction" "', argument " "4"" of type '" "unsigned int *""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  {
    try {
      result = (unsigned int)GetSlotBusDeviceFunction(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSoftwareVersion(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  unsigned int *arg6 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:GetSoftwareVersion eprom coffile vxdrev vxdver dllrev dllver ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSoftwareVersion" "', argument " "1"" of type '" "unsigned int *""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetSoftwareVersion" "', argument " "2"" of type '" "unsigned int *""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetSoftwareVersion" "', argument " "3"" of type '" "unsigned int *""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetSoftwareVersion" "', argument " "4"" of type '" "unsigned int *""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetSoftwareVersion" "', argument " "5"" of type '" "unsigned int *""'"); 
  }
  arg5 = reinterpret_cast< unsigned int * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "GetSoftwareVersion" "', argument " "6"" of type '" "unsigned int *""'"); 
  }
  arg6 = reinterpret_cast< unsigned int * >(argp6);
  {
    try {
      result = (unsigned int)GetSoftwareVersion(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetSpoolProgress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetSpoolProgress index ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetSpoolProgress" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetSpoolProgress(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetTemperature(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetTemperature temperature ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTemperature" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetTemperature(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetTemperatureF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetTemperatureF temperature ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTemperatureF" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  {
    try {
      result = (unsigned int)GetTemperatureF(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetTemperatureRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetTemperatureRange mintemp maxtemp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTemperatureRange" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTemperatureRange" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetTemperatureRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetTemperaturePrecision(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:GetTemperaturePrecision precision ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTemperaturePrecision" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (unsigned int)GetTemperaturePrecision(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetTemperatureStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetTemperatureStatus SensorTemp TargetTemp AmbientTemp CoolerVolts ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTemperatureStatus" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTemperatureStatus" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetTemperatureStatus" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetTemperatureStatus" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  {
    try {
      result = (unsigned int)GetTemperatureStatus(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIODirection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetIODirection index iDirection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIODirection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetIODirection" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetIODirection(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetIOLevel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetIOLevel index iLevel ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetIOLevel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetIOLevel" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetIOLevel(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetUSBDeviceDetails(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GetUSBDeviceDetails VendorID ProductID FirmwareVersion SpecificationNumber ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetUSBDeviceDetails" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetUSBDeviceDetails" "', argument " "2"" of type '" "unsigned short *""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GetUSBDeviceDetails" "', argument " "3"" of type '" "unsigned short *""'"); 
  }
  arg3 = reinterpret_cast< unsigned short * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GetUSBDeviceDetails" "', argument " "4"" of type '" "unsigned short *""'"); 
  }
  arg4 = reinterpret_cast< unsigned short * >(argp4);
  {
    try {
      result = (unsigned int)GetUSBDeviceDetails(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVersionInfo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AT_VersionInfoId arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GetVersionInfo arr szVersionInfo ui32BufferLen ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetVersionInfo" "', argument " "1"" of type '" "AT_VersionInfoId""'");
  } 
  arg1 = static_cast< AT_VersionInfoId >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVersionInfo" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GetVersionInfo" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (unsigned int)GetVersionInfo(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVerticalSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetVerticalSpeed index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetVerticalSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVerticalSpeed" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetVerticalSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVirtualDMAAddress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void **arg1 = (void **) 0 ;
  void **arg2 = (void **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetVirtualDMAAddress Address1 Address2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetVirtualDMAAddress" "', argument " "1"" of type '" "void **""'"); 
  }
  arg1 = reinterpret_cast< void ** >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVirtualDMAAddress" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  {
    try {
      result = (unsigned int)GetVirtualDMAAddress(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVSAmplitudeString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetVSAmplitudeString index text ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetVSAmplitudeString" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVSAmplitudeString" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (unsigned int)GetVSAmplitudeString(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVSAmplitudeFromString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetVSAmplitudeFromString text index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetVSAmplitudeFromString" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVSAmplitudeFromString" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetVSAmplitudeFromString(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVSAmplitudeValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetVSAmplitudeValue index value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetVSAmplitudeValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVSAmplitudeValue" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)GetVSAmplitudeValue(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetVSSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetVSSpeed index speed ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetVSSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetVSSpeed" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetVSSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GPIBReceive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  short arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:GPIBReceive id address text size ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GPIBReceive" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GPIBReceive" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GPIBReceive" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GPIBReceive" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (unsigned int)GPIBReceive(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GPIBSend(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  short arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:GPIBSend id address text ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GPIBSend" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GPIBSend" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GPIBSend" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      result = (unsigned int)GPIBSend(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_I2CBurstRead(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:I2CBurstRead i2cAddress nBytes data ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "I2CBurstRead" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2CBurstRead" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "I2CBurstRead" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      result = (unsigned int)I2CBurstRead(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_I2CBurstWrite(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:I2CBurstWrite i2cAddress nBytes data ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "I2CBurstWrite" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2CBurstWrite" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "I2CBurstWrite" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      result = (unsigned int)I2CBurstWrite(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_I2CRead(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:I2CRead deviceID intAddress pdata ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "I2CRead" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2CRead" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "I2CRead" "', argument " "3"" of type '" "unsigned char *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      result = (unsigned int)I2CRead(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_I2CReset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":I2CReset ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)I2CReset();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_I2CWrite(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:I2CWrite deviceID intAddress data ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "I2CWrite" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2CWrite" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "I2CWrite" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  {
    try {
      result = (unsigned int)I2CWrite(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdAndorDll(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":IdAndorDll ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)IdAndorDll();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_InAuxPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:InAuxPort port state ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "InAuxPort" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InAuxPort" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)InAuxPort(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Initialize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Initialize dir ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initialize" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)Initialize(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_InitializeDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:InitializeDevice dir ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InitializeDevice" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)InitializeDevice(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsAmplifierAvailable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IsAmplifierAvailable iamp ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsAmplifierAvailable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)IsAmplifierAvailable(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsCountConvertModeAvailable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IsCountConvertModeAvailable mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsCountConvertModeAvailable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)IsCountConvertModeAvailable(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsPreAmpGainAvailable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:IsPreAmpGainAvailable channel amplifier index pa status ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsPreAmpGainAvailable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IsPreAmpGainAvailable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IsPreAmpGainAvailable" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IsPreAmpGainAvailable" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IsPreAmpGainAvailable" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (unsigned int)IsPreAmpGainAvailable(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsReadoutFlippedByAmplifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IsReadoutFlippedByAmplifier iAmplifier iFlipped ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsReadoutFlippedByAmplifier" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsReadoutFlippedByAmplifier" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)IsReadoutFlippedByAmplifier(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IsTriggerModeAvailable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IsTriggerModeAvailable iTriggerMode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IsTriggerModeAvailable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)IsTriggerModeAvailable(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Merge(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float *arg5 = (float *) 0 ;
  int arg6 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooooo:Merge arr nOrder nPoint nPixel coeff fit hbin output start step_Renamed ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Merge" "', argument " "1"" of type '" "int const *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Merge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Merge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Merge" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Merge" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Merge" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Merge" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  res8 = SWIG_ConvertPtr(objv[8], &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "Merge" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = reinterpret_cast< int * >(argp8);
  res9 = SWIG_ConvertPtr(objv[9], &argp9,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Merge" "', argument " "9"" of type '" "float *""'"); 
  }
  arg9 = reinterpret_cast< float * >(argp9);
  res10 = SWIG_ConvertPtr(objv[10], &argp10,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Merge" "', argument " "10"" of type '" "float *""'"); 
  }
  arg10 = reinterpret_cast< float * >(argp10);
  {
    try {
      result = (unsigned int)Merge((int const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OutAuxPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OutAuxPort port state ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OutAuxPort" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OutAuxPort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)OutAuxPort(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PrepareAcquisition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":PrepareAcquisition ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)PrepareAcquisition();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsBmp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:SaveAsBmp path palette ymin ymax ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsBmp" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsBmp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveAsBmp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SaveAsBmp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (unsigned int)SaveAsBmp((char const *)arg1,(char const *)arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsCommentedSif(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SaveAsCommentedSif path comment ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsCommentedSif" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsCommentedSif" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (unsigned int)SaveAsCommentedSif(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsEDF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SaveAsEDF szPath iMode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsEDF" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveAsEDF" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SaveAsEDF(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsFITS(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SaveAsFITS szFileTitle typ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsFITS" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveAsFITS" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SaveAsFITS(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsRaw(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SaveAsRaw szFileTitle typ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsRaw" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SaveAsRaw" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SaveAsRaw(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsSif(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SaveAsSif path ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsSif" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)SaveAsSif(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsTiff(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:SaveAsTiff path palette position typ ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsTiff" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsTiff" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveAsTiff" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SaveAsTiff" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (unsigned int)SaveAsTiff(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveAsTiffEx(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SaveAsTiffEx path palette position typ mode ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveAsTiffEx" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SaveAsTiffEx" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SaveAsTiffEx" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SaveAsTiffEx" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SaveAsTiffEx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (unsigned int)SaveAsTiffEx(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveEEPROMToFile(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SaveEEPROMToFile cFileName ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveEEPROMToFile" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)SaveEEPROMToFile(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SaveToClipBoard(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SaveToClipBoard palette ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SaveToClipBoard" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)SaveToClipBoard(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SelectDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SelectDevice devNum ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectDevice" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SelectDevice(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SendSoftwareTrigger(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":SendSoftwareTrigger ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)SendSoftwareTrigger();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetAccumulationCycleTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetAccumulationCycleTime time ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetAccumulationCycleTime" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)SetAccumulationCycleTime(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetAcquisitionMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetAcquisitionMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetAcquisitionMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetAcquisitionMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSensorPortMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetSensorPortMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetSensorPortMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetSensorPortMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SelectSensorPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SelectSensorPort port ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectSensorPort" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SelectSensorPort(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetAcquisitionType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetAcquisitionType typ ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetAcquisitionType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetAcquisitionType(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetADChannel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetADChannel channel ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetADChannel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetADChannel(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetAdvancedTriggerModeState(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetAdvancedTriggerModeState iState ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetAdvancedTriggerModeState" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetAdvancedTriggerModeState(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetBackground(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetBackground arr size ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetBackground" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetBackground" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)SetBackground(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetBaselineClamp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetBaselineClamp state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetBaselineClamp" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetBaselineClamp(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetBaselineOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetBaselineOffset offset ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetBaselineOffset" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetBaselineOffset(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCameraLinkMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCameraLinkMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCameraLinkMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetCameraLinkMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCameraStatusEnable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCameraStatusEnable Enable ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCameraStatusEnable" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (unsigned int)SetCameraStatusEnable(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetChargeShifting(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetChargeShifting NumberRows NumberRepeats ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetChargeShifting" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetChargeShifting" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)SetChargeShifting(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetComplexImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetComplexImage numAreas areas ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetComplexImage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetComplexImage" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)SetComplexImage(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCoolerMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCoolerMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCoolerMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetCoolerMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCountConvertMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCountConvertMode Mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCountConvertMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetCountConvertMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCountConvertWavelength(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCountConvertWavelength wavelength ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCountConvertWavelength" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)SetCountConvertWavelength(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCropMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetCropMode active cropHeight reserved ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCropMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetCropMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetCropMode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)SetCropMode(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCurrentCamera(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCurrentCamera cameraHandle ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCurrentCamera" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetCurrentCamera(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetCustomTrackHBin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetCustomTrackHBin bin ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetCustomTrackHBin" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetCustomTrackHBin(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDataType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDataType typ ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDataType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDataType(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDACOutput(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDACOutput iOption iResolution iValue ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDACOutput" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDACOutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDACOutput" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)SetDACOutput(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDACOutputScale(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDACOutputScale iScale ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDACOutputScale" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDACOutputScale(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGAddress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SetDDGAddress t0 t1 t2 t3 address ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGAddress" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGAddress" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDDGAddress" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetDDGAddress" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetDDGAddress" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  {
    try {
      result = (unsigned int)SetDDGAddress(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGExternalOutputEnabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGExternalOutputEnabled uiIndex uiEnabled ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGExternalOutputEnabled" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGExternalOutputEnabled" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)SetDDGExternalOutputEnabled(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGExternalOutputPolarity(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGExternalOutputPolarity uiIndex uiPolarity ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGExternalOutputPolarity" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGExternalOutputPolarity" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)SetDDGExternalOutputPolarity(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGExternalOutputStepEnabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGExternalOutputStepEnabled uiIndex uiEnabled ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGExternalOutputStepEnabled" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGExternalOutputStepEnabled" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)SetDDGExternalOutputStepEnabled(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGExternalOutputTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDDGExternalOutputTime uiIndex uiDelay uiWidth ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGExternalOutputTime" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGExternalOutputTime" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDDGExternalOutputTime" "', argument " "3"" of type '" "unsigned long long""'");
  } 
  arg3 = static_cast< unsigned long long >(val3);
  {
    try {
      result = (unsigned int)SetDDGExternalOutputTime(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGGain gain ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGGain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDDGGain(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGGateStep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGGateStep step_Renamed ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGGateStep" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (unsigned int)SetDDGGateStep(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGGateTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long long arg1 ;
  unsigned long long arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGGateTime uiDelay uiWidth ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGGateTime" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  arg1 = static_cast< unsigned long long >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGGateTime" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  {
    try {
      result = (unsigned int)SetDDGGateTime(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGInsertionDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGInsertionDelay state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGInsertionDelay" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDDGInsertionDelay(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGIntelligate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGIntelligate state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGIntelligate" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDDGIntelligate(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGIOC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGIOC state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGIOC" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDDGIOC(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGIOCFrequency(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGIOCFrequency frequency ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGIOCFrequency" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (unsigned int)SetDDGIOCFrequency(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGIOCNumber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGIOCNumber numberPulses ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGIOCNumber" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (unsigned int)SetDDGIOCNumber(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGIOCPeriod(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long long arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGIOCPeriod period ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGIOCPeriod" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  arg1 = static_cast< unsigned long long >(val1);
  {
    try {
      result = (unsigned int)SetDDGIOCPeriod(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGIOCTrigger(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGIOCTrigger trigger ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGIOCTrigger" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)SetDDGIOCTrigger(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGOpticalWidthEnabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGOpticalWidthEnabled uiEnabled ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGOpticalWidthEnabled" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)SetDDGOpticalWidthEnabled(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGLiteGlobalControlByte(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGLiteGlobalControlByte control ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGLiteGlobalControlByte" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  {
    try {
      result = (unsigned int)SetDDGLiteGlobalControlByte(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGLiteControlByte(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AT_DDGLiteChannelId arg1 ;
  unsigned char arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGLiteControlByte channel control ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGLiteControlByte" "', argument " "1"" of type '" "AT_DDGLiteChannelId""'");
  } 
  arg1 = static_cast< AT_DDGLiteChannelId >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGLiteControlByte" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  {
    try {
      result = (unsigned int)SetDDGLiteControlByte(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGLiteInitialDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AT_DDGLiteChannelId arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGLiteInitialDelay channel fDelay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGLiteInitialDelay" "', argument " "1"" of type '" "AT_DDGLiteChannelId""'");
  } 
  arg1 = static_cast< AT_DDGLiteChannelId >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGLiteInitialDelay" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)SetDDGLiteInitialDelay(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGLitePulseWidth(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AT_DDGLiteChannelId arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGLitePulseWidth channel fWidth ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGLitePulseWidth" "', argument " "1"" of type '" "AT_DDGLiteChannelId""'");
  } 
  arg1 = static_cast< AT_DDGLiteChannelId >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGLitePulseWidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)SetDDGLitePulseWidth(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGLiteInterPulseDelay(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AT_DDGLiteChannelId arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGLiteInterPulseDelay channel fDelay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGLiteInterPulseDelay" "', argument " "1"" of type '" "AT_DDGLiteChannelId""'");
  } 
  arg1 = static_cast< AT_DDGLiteChannelId >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGLiteInterPulseDelay" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)SetDDGLiteInterPulseDelay(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGLitePulsesPerExposure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AT_DDGLiteChannelId arg1 ;
  unsigned int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDDGLitePulsesPerExposure channel ui32Pulses ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGLitePulsesPerExposure" "', argument " "1"" of type '" "AT_DDGLiteChannelId""'");
  } 
  arg1 = static_cast< AT_DDGLiteChannelId >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGLitePulsesPerExposure" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)SetDDGLitePulsesPerExposure(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGStepCoefficients(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDDGStepCoefficients mode p1 p2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGStepCoefficients" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGStepCoefficients" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDDGStepCoefficients" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (unsigned int)SetDDGStepCoefficients(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGWidthStepCoefficients(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDDGWidthStepCoefficients mode p1 p2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGWidthStepCoefficients" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGWidthStepCoefficients" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDDGWidthStepCoefficients" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (unsigned int)SetDDGWidthStepCoefficients(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGStepMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGStepMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGStepMode" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)SetDDGStepMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGWidthStepMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGWidthStepMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGWidthStepMode" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)SetDDGWidthStepMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDDGTimes t0 t1 t2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGTimes" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGTimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDDGTimes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (unsigned int)SetDDGTimes(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGTriggerMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDDGTriggerMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGTriggerMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDDGTriggerMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDDGVariableGateStep(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  double arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDDGVariableGateStep mode p1 p2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDDGVariableGateStep" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDDGVariableGateStep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDDGVariableGateStep" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (unsigned int)SetDDGVariableGateStep(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDelayGenerator(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  short arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetDelayGenerator board address typ ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDelayGenerator" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDelayGenerator" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetDelayGenerator" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)SetDelayGenerator(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDMAParameters(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDMAParameters MaxImagesPerDMA SecondsPerDMA ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDMAParameters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDMAParameters" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)SetDMAParameters(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetEMAdvanced(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetEMAdvanced state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetEMAdvanced" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetEMAdvanced(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetEMCCDGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetEMCCDGain gain ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetEMCCDGain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetEMCCDGain(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetEMClockCompensation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetEMClockCompensation EMClockCompensationFlag ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetEMClockCompensation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetEMClockCompensation(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetEMGainMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetEMGainMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetEMGainMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetEMGainMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetExposureTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetExposureTime time ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetExposureTime" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)SetExposureTime(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetExternalTriggerTermination(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetExternalTriggerTermination uiTermination ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetExternalTriggerTermination" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)SetExternalTriggerTermination(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFanMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFanMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFanMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFastExtTrigger(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFastExtTrigger mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFastExtTrigger" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFastExtTrigger(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFastKinetics(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:SetFastKinetics exposedRows seriesLength time mode hbin vbin ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFastKinetics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetFastKinetics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetFastKinetics" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetFastKinetics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetFastKinetics" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetFastKinetics" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (unsigned int)SetFastKinetics(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFastKineticsEx(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:SetFastKineticsEx exposedRows seriesLength time mode hbin vbin offset ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFastKineticsEx" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetFastKineticsEx" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetFastKineticsEx" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetFastKineticsEx" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetFastKineticsEx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetFastKineticsEx" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SetFastKineticsEx" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (unsigned int)SetFastKineticsEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFastKineticsStorageMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFastKineticsStorageMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFastKineticsStorageMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFastKineticsStorageMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFastKineticsTimeScanMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetFastKineticsTimeScanMode rows tracks mode ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFastKineticsTimeScanMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetFastKineticsTimeScanMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetFastKineticsTimeScanMode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)SetFastKineticsTimeScanMode(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFilterMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFilterMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFilterMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFilterMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFilterParameters(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float arg2 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:SetFilterParameters width sensitivity range accept smooth noise ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFilterParameters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetFilterParameters" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetFilterParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetFilterParameters" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetFilterParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetFilterParameters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (unsigned int)SetFilterParameters(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFKVShiftSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFKVShiftSpeed index ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFKVShiftSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFKVShiftSpeed(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFPDP(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFPDP state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFPDP" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFPDP(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFrameTransferMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFrameTransferMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFrameTransferMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFrameTransferMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFullImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetFullImage hbin vbin ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFullImage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetFullImage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetFullImage(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetFVBHBin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetFVBHBin bin ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetFVBHBin" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetFVBHBin(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetGain gain ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetGain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetGain(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetGate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SetGate delay width stepRenamed ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetGate" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetGate" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetGate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (unsigned int)SetGate(arg1,arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetGateMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetGateMode gatemode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetGateMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetGateMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetHighCapacity(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetHighCapacity state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetHighCapacity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetHighCapacity(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetHorizontalSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetHorizontalSpeed index ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetHorizontalSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetHorizontalSpeed(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetHSSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetHSSpeed typ index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetHSSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetHSSpeed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetHSSpeed(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetImage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:SetImage hbin vbin hstart hend vstart vend ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetImage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetImage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetImage" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetImage" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetImage" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetImage" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (unsigned int)SetImage(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetImageFlip(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetImageFlip iHFlip iVFlip ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetImageFlip" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetImageFlip" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetImageFlip(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetImageRotate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetImageRotate iRotate ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetImageRotate" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetImageRotate(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetIsolatedCropMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SetIsolatedCropMode active cropheight cropwidth vbin hbin ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetIsolatedCropMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetIsolatedCropMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetIsolatedCropMode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetIsolatedCropMode" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetIsolatedCropMode" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (unsigned int)SetIsolatedCropMode(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetIsolatedCropModeEx(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:SetIsolatedCropModeEx active cropheight cropwidth vbin hbin cropleft cropbottom ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetIsolatedCropModeEx" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetIsolatedCropModeEx" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetIsolatedCropModeEx" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetIsolatedCropModeEx" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetIsolatedCropModeEx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetIsolatedCropModeEx" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SetIsolatedCropModeEx" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (unsigned int)SetIsolatedCropModeEx(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetKineticCycleTime(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetKineticCycleTime time ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetKineticCycleTime" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)SetKineticCycleTime(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMCPGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetMCPGain gain ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMCPGain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetMCPGain(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMCPGating(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetMCPGating gating ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMCPGating" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetMCPGating(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMessageWindow(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetMessageWindow wnd ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMessageWindow" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetMessageWindow(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMetaData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetMetaData state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMetaData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetMetaData(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMultiTrack(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SetMultiTrack number height offset bottom gap ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMultiTrack" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetMultiTrack" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetMultiTrack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SetMultiTrack" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SetMultiTrack" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      result = (unsigned int)SetMultiTrack(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMultiTrackHBin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetMultiTrackHBin bin ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMultiTrackHBin" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetMultiTrackHBin(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMultiTrackHRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetMultiTrackHRange iStart iEnd ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMultiTrackHRange" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetMultiTrackHRange" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetMultiTrackHRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetMultiTrackScan(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooooo:SetMultiTrackScan trackHeight numberTracks iSIHStart iSIHEnd trackHBinning trackVBinning trackGap trackOffset trackSkip numberSubFrames ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetMultiTrackScan" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetMultiTrackScan" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetMultiTrackScan" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetMultiTrackScan" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetMultiTrackScan" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetMultiTrackScan" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SetMultiTrackScan" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SetMultiTrackScan" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[9], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SetMultiTrackScan" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[10], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SetMultiTrackScan" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = (unsigned int)SetMultiTrackScan(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetNextAddress(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SetNextAddress data lowAdd highAdd length physical ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetNextAddress" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetNextAddress" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetNextAddress" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetNextAddress" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetNextAddress" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (unsigned int)SetNextAddress(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetNumberAccumulations(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetNumberAccumulations number ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetNumberAccumulations" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetNumberAccumulations(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetNumberKinetics(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetNumberKinetics number ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetNumberKinetics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetNumberKinetics(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetNumberPrescans(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetNumberPrescans iNumber ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetNumberPrescans" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetNumberPrescans(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetOutputAmplifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetOutputAmplifier typ ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetOutputAmplifier" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetOutputAmplifier(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetOverlapMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetOverlapMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetOverlapMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetOverlapMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetPhotonCounting(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetPhotonCounting state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPhotonCounting" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetPhotonCounting(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetPhotonCountingThreshold(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetPhotonCountingThreshold min max ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPhotonCountingThreshold" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetPhotonCountingThreshold" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetPhotonCountingThreshold(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetPhotonCountingDivisions(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int *arg2 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetPhotonCountingDivisions noOfDivisions divisions ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPhotonCountingDivisions" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetPhotonCountingDivisions" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)SetPhotonCountingDivisions(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetPixelMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetPixelMode bitdepth colormode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPixelMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetPixelMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetPixelMode(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetPreAmpGain(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetPreAmpGain index ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPreAmpGain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetPreAmpGain(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDualExposureTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetDualExposureTimes expTime1 expTime2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDualExposureTimes" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetDualExposureTimes" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)SetDualExposureTimes(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetDualExposureMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetDualExposureMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetDualExposureMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetDualExposureMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetRandomTracks(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetRandomTracks numTracks areas ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetRandomTracks" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetRandomTracks" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    try {
      result = (unsigned int)SetRandomTracks(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetReadMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetReadMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetReadMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetReadMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetReadoutRegisterPacking(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetReadoutRegisterPacking mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetReadoutRegisterPacking" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)SetReadoutRegisterPacking(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetRegisterDump(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetRegisterDump mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetRegisterDump" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetRegisterDump(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetRingExposureTimes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  float *arg2 = (float *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetRingExposureTimes numTimes times ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetRingExposureTimes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetRingExposureTimes" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)SetRingExposureTimes(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetShutter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:SetShutter typ mode closingtime openingtime ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetShutter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetShutter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetShutter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetShutter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (unsigned int)SetShutter(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetShutterEx(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SetShutterEx typ mode closingtime openingtime extmode ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetShutterEx" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetShutterEx" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetShutterEx" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetShutterEx" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetShutterEx" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (unsigned int)SetShutterEx(arg1,arg2,arg3,arg4,arg5);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetShutters(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:SetShutters typ mode closingtime openingtime exttype extmode dummy1 dummy2 ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetShutters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetShutters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SetShutters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetShutters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SetShutters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SetShutters" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SetShutters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SetShutters" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (unsigned int)SetShutters(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSifComment(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetSifComment comment ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetSifComment" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)SetSifComment(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSingleTrack(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetSingleTrack centre height ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetSingleTrack" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetSingleTrack" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetSingleTrack(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSingleTrackHBin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetSingleTrackHBin bin ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetSingleTrackHBin" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetSingleTrackHBin(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSpool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:SetSpool active method path framebuffersize ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetSpool" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetSpool" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SetSpool" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SetSpool" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (unsigned int)SetSpool(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetSpoolThreadCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetSpoolThreadCount count ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetSpoolThreadCount" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetSpoolThreadCount(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetStorageMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetStorageMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetStorageMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetStorageMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetTemperature(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetTemperature temperature ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetTemperature" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetTemperature(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetTriggerMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetTriggerMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetTriggerMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetTriggerMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetTriggerInvert(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetTriggerInvert mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetTriggerInvert" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetTriggerInvert(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_GetTriggerLevelRange(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:GetTriggerLevelRange minimum maximum ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetTriggerLevelRange" "', argument " "1"" of type '" "float *""'"); 
  }
  arg1 = reinterpret_cast< float * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GetTriggerLevelRange" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    try {
      result = (unsigned int)GetTriggerLevelRange(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetTriggerLevel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetTriggerLevel f_level ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetTriggerLevel" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)SetTriggerLevel(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetIODirection(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetIODirection index iDirection ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetIODirection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetIODirection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetIODirection(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetIOLevel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetIOLevel index iLevel ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetIOLevel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetIOLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetIOLevel(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetUSGenomics(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetUSGenomics width height ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetUSGenomics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetUSGenomics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)SetUSGenomics(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetVerticalRowBuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetVerticalRowBuffer rows ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetVerticalRowBuffer" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetVerticalRowBuffer(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetVerticalSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetVerticalSpeed index ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetVerticalSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetVerticalSpeed(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetVirtualChip(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetVirtualChip state ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetVirtualChip" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetVirtualChip(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetVSAmplitude(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetVSAmplitude index ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetVSAmplitude" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetVSAmplitude(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetVSSpeed(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SetVSSpeed index ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetVSSpeed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)SetVSSpeed(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShutDown(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":ShutDown ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)ShutDown();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StartAcquisition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":StartAcquisition ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)StartAcquisition();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UpdateDDGTimings(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":UpdateDDGTimings ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)UpdateDDGTimings();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WaitForAcquisition(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":WaitForAcquisition ") == TCL_ERROR) SWIG_fail;
  {
    try {
      result = (unsigned int)WaitForAcquisition();
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WaitForAcquisitionByHandle(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WaitForAcquisitionByHandle cameraHandle ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WaitForAcquisitionByHandle" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)WaitForAcquisitionByHandle(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WaitForAcquisitionByHandleTimeOut(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long arg1 ;
  int arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WaitForAcquisitionByHandleTimeOut cameraHandle iTimeOutMs ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WaitForAcquisitionByHandleTimeOut" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WaitForAcquisitionByHandleTimeOut" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)WaitForAcquisitionByHandleTimeOut(arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WaitForAcquisitionTimeOut(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WaitForAcquisitionTimeOut iTimeOutMs ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WaitForAcquisitionTimeOut" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)WaitForAcquisitionTimeOut(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WhiteBalance(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  WhiteBalanceInfo *arg6 = (WhiteBalanceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:WhiteBalance wRed wGreen wBlue fRelR fRelB info ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WhiteBalance" "', argument " "1"" of type '" "unsigned short *""'"); 
  }
  arg1 = reinterpret_cast< unsigned short * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WhiteBalance" "', argument " "2"" of type '" "unsigned short *""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WhiteBalance" "', argument " "3"" of type '" "unsigned short *""'"); 
  }
  arg3 = reinterpret_cast< unsigned short * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WhiteBalance" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "WhiteBalance" "', argument " "5"" of type '" "float *""'"); 
  }
  arg5 = reinterpret_cast< float * >(argp5);
  res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_WHITEBALANCEINFO, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "WhiteBalance" "', argument " "6"" of type '" "WhiteBalanceInfo *""'"); 
  }
  arg6 = reinterpret_cast< WhiteBalanceInfo * >(argp6);
  {
    try {
      result = (unsigned int)WhiteBalance(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_Initialize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  unsigned int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OA_Initialize pcFilename uiFileNameLen ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_Initialize" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OA_Initialize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)OA_Initialize((char const *)arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_EnableMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:OA_EnableMode pcModeName ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_EnableMode" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)OA_EnableMode((char const *)arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetModeAcqParams(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OA_GetModeAcqParams pcModeName pcListOfParams ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetModeAcqParams" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_GetModeAcqParams" "', argument " "2"" of type '" "char *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (unsigned int)OA_GetModeAcqParams((char const *)arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetUserModeNames(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:OA_GetUserModeNames pcListOfModes ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetUserModeNames" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)OA_GetUserModeNames(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetPreSetModeNames(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:OA_GetPreSetModeNames pcListOfModes ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetPreSetModeNames" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (unsigned int)OA_GetPreSetModeNames(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetNumberOfUserModes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) (unsigned int *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:OA_GetNumberOfUserModes puiNumberOfModes ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetNumberOfUserModes" "', argument " "1"" of type '" "unsigned int *const""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  {
    try {
      result = (unsigned int)OA_GetNumberOfUserModes(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetNumberOfPreSetModes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = (unsigned int *) (unsigned int *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:OA_GetNumberOfPreSetModes puiNumberOfModes ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetNumberOfPreSetModes" "', argument " "1"" of type '" "unsigned int *const""'"); 
  }
  arg1 = reinterpret_cast< unsigned int * >(argp1);
  {
    try {
      result = (unsigned int)OA_GetNumberOfPreSetModes(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetNumberOfAcqParams(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OA_GetNumberOfAcqParams pcModeName puiNumberOfParams ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetNumberOfAcqParams" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_GetNumberOfAcqParams" "', argument " "2"" of type '" "unsigned int *const""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  {
    try {
      result = (unsigned int)OA_GetNumberOfAcqParams((char const *)arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_AddMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:OA_AddMode pcModeName uiModeNameLen pcModeDescription uiModeDescriptionLen ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_AddMode" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OA_AddMode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OA_AddMode" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OA_AddMode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (unsigned int)OA_AddMode(arg1,arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_WriteToFile(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  unsigned int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OA_WriteToFile pcFileName uiFileNameLen ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_WriteToFile" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OA_WriteToFile" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)OA_WriteToFile((char const *)arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_DeleteMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  unsigned int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:OA_DeleteMode pcModeName uiModeNameLen ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_DeleteMode" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OA_DeleteMode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)OA_DeleteMode((char const *)arg1,arg2);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_SetInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:OA_SetInt pcModeName pcModeParam iIntValue ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_SetInt" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_SetInt" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OA_SetInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)OA_SetInt((char const *)arg1,(char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_SetFloat(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:OA_SetFloat pcModeName pcModeParam fFloatValue ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_SetFloat" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_SetFloat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OA_SetFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (unsigned int)OA_SetFloat((char const *)arg1,(char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_SetString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:OA_SetString pcModeName pcModeParam pcStringValue uiStringLen ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_SetString" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_SetString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OA_SetString" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OA_SetString" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (unsigned int)OA_SetString((char const *)arg1,(char const *)arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  int *arg3 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:OA_GetInt pcModeName pcModeParam iIntValue ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetInt" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_GetInt" "', argument " "2"" of type '" "char const *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OA_GetInt" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  {
    try {
      result = (unsigned int)OA_GetInt((char const *)arg1,(char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetFloat(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  float *arg3 = (float *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:OA_GetFloat pcModeName pcModeParam fFloatValue ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetFloat" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_GetFloat" "', argument " "2"" of type '" "char const *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OA_GetFloat" "', argument " "3"" of type '" "float *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  {
    try {
      result = (unsigned int)OA_GetFloat((char const *)arg1,(char const *)arg2,arg3);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_OA_GetString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) (char *)0 ;
  char *arg2 = (char *) (char *)0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:OA_GetString pcModeName pcModeParam pcStringValue uiStringLen ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OA_GetString" "', argument " "1"" of type '" "char const *const""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OA_GetString" "', argument " "2"" of type '" "char const *const""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OA_GetString" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OA_GetString" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (unsigned int)OA_GetString((char const *)arg1,(char const *)arg2,arg3,arg4);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Filter_SetMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Filter_SetMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Filter_SetMode" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)Filter_SetMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Filter_SetThreshold(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Filter_SetThreshold threshold ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Filter_SetThreshold" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)Filter_SetThreshold(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Filter_SetDataAveragingMode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Filter_SetDataAveragingMode mode ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Filter_SetDataAveragingMode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)Filter_SetDataAveragingMode(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Filter_SetAveragingFrameCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Filter_SetAveragingFrameCount frames ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Filter_SetAveragingFrameCount" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)Filter_SetAveragingFrameCount(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Filter_SetAveragingFactor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Filter_SetAveragingFactor averagingFactor ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Filter_SetAveragingFactor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (unsigned int)Filter_SetAveragingFactor(arg1);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PostProcessNoiseFilter(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:PostProcessNoiseFilter pInputImage pOutputImage iOutputBufferSize iBaseline iMode fThreshold iHeight iWidth ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PostProcessNoiseFilter" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PostProcessNoiseFilter" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PostProcessNoiseFilter" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PostProcessNoiseFilter" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PostProcessNoiseFilter" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PostProcessNoiseFilter" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PostProcessNoiseFilter" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PostProcessNoiseFilter" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (unsigned int)PostProcessNoiseFilter(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PostProcessCountConvert(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  float arg9 ;
  int arg10 ;
  int arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooooo:PostProcessCountConvert pInputImage pOutputImage iOutputBufferSize iNumImages iBaseline iMode iEmGain fQE fSensitivity iHeight iWidth ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PostProcessCountConvert" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PostProcessCountConvert" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PostProcessCountConvert" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PostProcessCountConvert" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PostProcessCountConvert" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PostProcessCountConvert" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PostProcessCountConvert" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PostProcessCountConvert" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = static_cast< float >(val8);
  ecode9 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[9], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PostProcessCountConvert" "', argument " "9"" of type '" "float""'");
  } 
  arg9 = static_cast< float >(val9);
  ecode10 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[10], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "PostProcessCountConvert" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[11], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "PostProcessCountConvert" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    try {
      result = (unsigned int)PostProcessCountConvert(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PostProcessPhotonCounting(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:PostProcessPhotonCounting pInputImage pOutputImage iOutputBufferSize iNumImages iNumframes iNumberOfThresholds pfThreshold iHeight iWidth ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PostProcessPhotonCounting" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PostProcessPhotonCounting" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PostProcessPhotonCounting" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PostProcessPhotonCounting" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PostProcessPhotonCounting" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PostProcessPhotonCounting" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(objv[7], &argp7,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PostProcessPhotonCounting" "', argument " "7"" of type '" "float *""'"); 
  }
  arg7 = reinterpret_cast< float * >(argp7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PostProcessPhotonCounting" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[9], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PostProcessPhotonCounting" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (unsigned int)PostProcessPhotonCounting(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PostProcessDataAveraging(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:PostProcessDataAveraging pInputImage pOutputImage iOutputBufferSize iNumImages iAveragingFilterMode iHeight iWidth iFrameCount iAveragingFactor ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PostProcessDataAveraging" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PostProcessDataAveraging" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PostProcessDataAveraging" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PostProcessDataAveraging" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PostProcessDataAveraging" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PostProcessDataAveraging" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PostProcessDataAveraging" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PostProcessDataAveraging" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[9], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PostProcessDataAveraging" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  {
    try {
      result = (unsigned int)PostProcessDataAveraging(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what() );
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown error");
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "cdata", (swig_wrapper_func) _wrap_cdata, NULL},
    { SWIG_prefix "memmove", (swig_wrapper_func) _wrap_memmove, NULL},
    { SWIG_prefix "new_ushortArray", (swig_wrapper_func) _wrap_new_ushortArray, NULL},
    { SWIG_prefix "delete_ushortArray", (swig_wrapper_func) _wrap_delete_ushortArray, NULL},
    { SWIG_prefix "ushortArray_getitem", (swig_wrapper_func) _wrap_ushortArray_getitem, NULL},
    { SWIG_prefix "ushortArray_setitem", (swig_wrapper_func) _wrap_ushortArray_setitem, NULL},
    { SWIG_prefix "ushortArray_cast", (swig_wrapper_func) _wrap_ushortArray_cast, NULL},
    { SWIG_prefix "ushortArray_frompointer", (swig_wrapper_func) _wrap_ushortArray_frompointer, NULL},
    { SWIG_prefix "ushortArray", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ushortArray},
    { SWIG_prefix "SYSTEMTIME_wYear_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wYear_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wYear_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wYear_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wMonth_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wMonth_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wMonth_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wMonth_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wDayOfWeek_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wDayOfWeek_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wDayOfWeek_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wDayOfWeek_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wDay_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wDay_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wDay_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wDay_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wHour_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wHour_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wHour_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wHour_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wMinute_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wMinute_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wMinute_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wMinute_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wSecond_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wSecond_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wSecond_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wSecond_get, NULL},
    { SWIG_prefix "SYSTEMTIME_wMilliseconds_set", (swig_wrapper_func) _wrap_SYSTEMTIME_wMilliseconds_set, NULL},
    { SWIG_prefix "SYSTEMTIME_wMilliseconds_get", (swig_wrapper_func) _wrap_SYSTEMTIME_wMilliseconds_get, NULL},
    { SWIG_prefix "new_SYSTEMTIME", (swig_wrapper_func) _wrap_new_SYSTEMTIME, NULL},
    { SWIG_prefix "delete_SYSTEMTIME", (swig_wrapper_func) _wrap_delete_SYSTEMTIME, NULL},
    { SWIG_prefix "SYSTEMTIME", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SYSTEMTIME},
    { SWIG_prefix "AndorCapabilities_ulSize_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulSize_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulSize_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulSize_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulAcqModes_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulAcqModes_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulAcqModes_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulAcqModes_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulReadModes_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulReadModes_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulReadModes_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulReadModes_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulTriggerModes_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulTriggerModes_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulTriggerModes_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulTriggerModes_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulCameraType_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulCameraType_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulCameraType_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulCameraType_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulPixelMode_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulPixelMode_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulPixelMode_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulPixelMode_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulSetFunctions_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulSetFunctions_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulSetFunctions_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulSetFunctions_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulGetFunctions_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulGetFunctions_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulGetFunctions_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulGetFunctions_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulFeatures_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulFeatures_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulFeatures_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulFeatures_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulPCICard_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulPCICard_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulPCICard_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulPCICard_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulEMGainCapability_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulEMGainCapability_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulEMGainCapability_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulEMGainCapability_get, NULL},
    { SWIG_prefix "AndorCapabilities_ulFTReadModes_set", (swig_wrapper_func) _wrap_AndorCapabilities_ulFTReadModes_set, NULL},
    { SWIG_prefix "AndorCapabilities_ulFTReadModes_get", (swig_wrapper_func) _wrap_AndorCapabilities_ulFTReadModes_get, NULL},
    { SWIG_prefix "new_AndorCapabilities", (swig_wrapper_func) _wrap_new_AndorCapabilities, NULL},
    { SWIG_prefix "delete_AndorCapabilities", (swig_wrapper_func) _wrap_delete_AndorCapabilities, NULL},
    { SWIG_prefix "AndorCapabilities", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ANDORCAPS},
    { SWIG_prefix "ColorDemosaicInfo_iX_set", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iX_set, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iX_get", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iX_get, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iY_set", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iY_set, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iY_get", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iY_get, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iAlgorithm_set", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iAlgorithm_set, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iAlgorithm_get", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iAlgorithm_get, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iXPhase_set", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iXPhase_set, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iXPhase_get", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iXPhase_get, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iYPhase_set", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iYPhase_set, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iYPhase_get", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iYPhase_get, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iBackground_set", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iBackground_set, NULL},
    { SWIG_prefix "ColorDemosaicInfo_iBackground_get", (swig_wrapper_func) _wrap_ColorDemosaicInfo_iBackground_get, NULL},
    { SWIG_prefix "new_ColorDemosaicInfo", (swig_wrapper_func) _wrap_new_ColorDemosaicInfo, NULL},
    { SWIG_prefix "delete_ColorDemosaicInfo", (swig_wrapper_func) _wrap_delete_ColorDemosaicInfo, NULL},
    { SWIG_prefix "ColorDemosaicInfo", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_COLORDEMOSAICINFO},
    { SWIG_prefix "WhiteBalanceInfo_iSize_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iSize_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iSize_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iSize_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iX_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iX_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iX_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iX_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iY_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iY_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iY_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iY_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iAlgorithm_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iAlgorithm_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iAlgorithm_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iAlgorithm_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_left_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_left_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_left_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_left_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_right_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_right_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_right_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_right_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_top_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_top_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_top_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_top_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_bottom_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_bottom_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iROI_bottom_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iROI_bottom_get, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iOperation_set", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iOperation_set, NULL},
    { SWIG_prefix "WhiteBalanceInfo_iOperation_get", (swig_wrapper_func) _wrap_WhiteBalanceInfo_iOperation_get, NULL},
    { SWIG_prefix "new_WhiteBalanceInfo", (swig_wrapper_func) _wrap_new_WhiteBalanceInfo, NULL},
    { SWIG_prefix "delete_WhiteBalanceInfo", (swig_wrapper_func) _wrap_delete_WhiteBalanceInfo, NULL},
    { SWIG_prefix "WhiteBalanceInfo", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_WHITEBALANCEINFO},
    { SWIG_prefix "AbortAcquisition", (swig_wrapper_func) _wrap_AbortAcquisition, NULL},
    { SWIG_prefix "CancelWait", (swig_wrapper_func) _wrap_CancelWait, NULL},
    { SWIG_prefix "CoolerOFF", (swig_wrapper_func) _wrap_CoolerOFF, NULL},
    { SWIG_prefix "CoolerON", (swig_wrapper_func) _wrap_CoolerON, NULL},
    { SWIG_prefix "DemosaicImage", (swig_wrapper_func) _wrap_DemosaicImage, NULL},
    { SWIG_prefix "EnableKeepCleans", (swig_wrapper_func) _wrap_EnableKeepCleans, NULL},
    { SWIG_prefix "EnableSensorCompensation", (swig_wrapper_func) _wrap_EnableSensorCompensation, NULL},
    { SWIG_prefix "SetIRIGModulation", (swig_wrapper_func) _wrap_SetIRIGModulation, NULL},
    { SWIG_prefix "FreeInternalMemory", (swig_wrapper_func) _wrap_FreeInternalMemory, NULL},
    { SWIG_prefix "GetAcquiredData", (swig_wrapper_func) _wrap_GetAcquiredData, NULL},
    { SWIG_prefix "GetAcquiredData16", (swig_wrapper_func) _wrap_GetAcquiredData16, NULL},
    { SWIG_prefix "GetAcquiredFloatData", (swig_wrapper_func) _wrap_GetAcquiredFloatData, NULL},
    { SWIG_prefix "GetAcquisitionProgress", (swig_wrapper_func) _wrap_GetAcquisitionProgress, NULL},
    { SWIG_prefix "GetAcquisitionTimings", (swig_wrapper_func) _wrap_GetAcquisitionTimings, NULL},
    { SWIG_prefix "GetAdjustedRingExposureTimes", (swig_wrapper_func) _wrap_GetAdjustedRingExposureTimes, NULL},
    { SWIG_prefix "GetAllDMAData", (swig_wrapper_func) _wrap_GetAllDMAData, NULL},
    { SWIG_prefix "GetAmpDesc", (swig_wrapper_func) _wrap_GetAmpDesc, NULL},
    { SWIG_prefix "GetAmpMaxSpeed", (swig_wrapper_func) _wrap_GetAmpMaxSpeed, NULL},
    { SWIG_prefix "GetBackground", (swig_wrapper_func) _wrap_GetBackground, NULL},
    { SWIG_prefix "GetBitDepth", (swig_wrapper_func) _wrap_GetBitDepth, NULL},
    { SWIG_prefix "GetCameraHandle", (swig_wrapper_func) _wrap_GetCameraHandle, NULL},
    { SWIG_prefix "GetCameraInformation", (swig_wrapper_func) _wrap_GetCameraInformation, NULL},
    { SWIG_prefix "GetCapabilities", (swig_wrapper_func) _wrap_GetCapabilities, NULL},
    { SWIG_prefix "GetControllerCardModel", (swig_wrapper_func) _wrap_GetControllerCardModel, NULL},
    { SWIG_prefix "GetCountConvertWavelengthRange", (swig_wrapper_func) _wrap_GetCountConvertWavelengthRange, NULL},
    { SWIG_prefix "GetCurrentCamera", (swig_wrapper_func) _wrap_GetCurrentCamera, NULL},
    { SWIG_prefix "GetDetector", (swig_wrapper_func) _wrap_GetDetector, NULL},
    { SWIG_prefix "GetDICameraInfo", (swig_wrapper_func) _wrap_GetDICameraInfo, NULL},
    { SWIG_prefix "GetEMGainRange", (swig_wrapper_func) _wrap_GetEMGainRange, NULL},
    { SWIG_prefix "GetFastestRecommendedVSSpeed", (swig_wrapper_func) _wrap_GetFastestRecommendedVSSpeed, NULL},
    { SWIG_prefix "GetFKVShiftSpeed", (swig_wrapper_func) _wrap_GetFKVShiftSpeed, NULL},
    { SWIG_prefix "GetFKVShiftSpeedF", (swig_wrapper_func) _wrap_GetFKVShiftSpeedF, NULL},
    { SWIG_prefix "GetHardwareVersion", (swig_wrapper_func) _wrap_GetHardwareVersion, NULL},
    { SWIG_prefix "GetHeadModel", (swig_wrapper_func) _wrap_GetHeadModel, NULL},
    { SWIG_prefix "GetHorizontalSpeed", (swig_wrapper_func) _wrap_GetHorizontalSpeed, NULL},
    { SWIG_prefix "GetHSSpeed", (swig_wrapper_func) _wrap_GetHSSpeed, NULL},
    { SWIG_prefix "GetHVflag", (swig_wrapper_func) _wrap_GetHVflag, NULL},
    { SWIG_prefix "GetID", (swig_wrapper_func) _wrap_GetID, NULL},
    { SWIG_prefix "GetImageFlip", (swig_wrapper_func) _wrap_GetImageFlip, NULL},
    { SWIG_prefix "GetImages", (swig_wrapper_func) _wrap_GetImages, NULL},
    { SWIG_prefix "GetImages16", (swig_wrapper_func) _wrap_GetImages16, NULL},
    { SWIG_prefix "GetImagesPerDMA", (swig_wrapper_func) _wrap_GetImagesPerDMA, NULL},
    { SWIG_prefix "GetMaximumBinning", (swig_wrapper_func) _wrap_GetMaximumBinning, NULL},
    { SWIG_prefix "GetMCPGain", (swig_wrapper_func) _wrap_GetMCPGain, NULL},
    { SWIG_prefix "GetMCPGainRange", (swig_wrapper_func) _wrap_GetMCPGainRange, NULL},
    { SWIG_prefix "GetMCPGainTable", (swig_wrapper_func) _wrap_GetMCPGainTable, NULL},
    { SWIG_prefix "GetMCPVoltage", (swig_wrapper_func) _wrap_GetMCPVoltage, NULL},
    { SWIG_prefix "GetMostRecentColorImage16", (swig_wrapper_func) _wrap_GetMostRecentColorImage16, NULL},
    { SWIG_prefix "GetMostRecentImage", (swig_wrapper_func) _wrap_GetMostRecentImage, NULL},
    { SWIG_prefix "GetMostRecentImage16", (swig_wrapper_func) _wrap_GetMostRecentImage16, NULL},
    { SWIG_prefix "GetMetaDataInfo", (swig_wrapper_func) _wrap_GetMetaDataInfo, NULL},
    { SWIG_prefix "GetMSTimingsEnabled", (swig_wrapper_func) _wrap_GetMSTimingsEnabled, NULL},
    { SWIG_prefix "GetNewData", (swig_wrapper_func) _wrap_GetNewData, NULL},
    { SWIG_prefix "GetNewData16", (swig_wrapper_func) _wrap_GetNewData16, NULL},
    { SWIG_prefix "GetNewFloatData", (swig_wrapper_func) _wrap_GetNewFloatData, NULL},
    { SWIG_prefix "GetNumberAvailableImages", (swig_wrapper_func) _wrap_GetNumberAvailableImages, NULL},
    { SWIG_prefix "GetNumberDDGExternalOutputs", (swig_wrapper_func) _wrap_GetNumberDDGExternalOutputs, NULL},
    { SWIG_prefix "GetNumberHSSpeeds", (swig_wrapper_func) _wrap_GetNumberHSSpeeds, NULL},
    { SWIG_prefix "GetNumberMissedExternalTriggers", (swig_wrapper_func) _wrap_GetNumberMissedExternalTriggers, NULL},
    { SWIG_prefix "GetIRIGData", (swig_wrapper_func) _wrap_GetIRIGData, NULL},
    { SWIG_prefix "GetNumberNewImages", (swig_wrapper_func) _wrap_GetNumberNewImages, NULL},
    { SWIG_prefix "GetNumberPhotonCountingDivisions", (swig_wrapper_func) _wrap_GetNumberPhotonCountingDivisions, NULL},
    { SWIG_prefix "GetOldestImage", (swig_wrapper_func) _wrap_GetOldestImage, NULL},
    { SWIG_prefix "GetOldestImage16", (swig_wrapper_func) _wrap_GetOldestImage16, NULL},
    { SWIG_prefix "GetPhosphorStatus", (swig_wrapper_func) _wrap_GetPhosphorStatus, NULL},
    { SWIG_prefix "GetPhysicalDMAAddress", (swig_wrapper_func) _wrap_GetPhysicalDMAAddress, NULL},
    { SWIG_prefix "GetPixelSize", (swig_wrapper_func) _wrap_GetPixelSize, NULL},
    { SWIG_prefix "GetPreAmpGain", (swig_wrapper_func) _wrap_GetPreAmpGain, NULL},
    { SWIG_prefix "GetPreAmpGainText", (swig_wrapper_func) _wrap_GetPreAmpGainText, NULL},
    { SWIG_prefix "GetDualExposureTimes", (swig_wrapper_func) _wrap_GetDualExposureTimes, NULL},
    { SWIG_prefix "GetQE", (swig_wrapper_func) _wrap_GetQE, NULL},
    { SWIG_prefix "GetRegisterDump", (swig_wrapper_func) _wrap_GetRegisterDump, NULL},
    { SWIG_prefix "GetRelativeImageTimes", (swig_wrapper_func) _wrap_GetRelativeImageTimes, NULL},
    { SWIG_prefix "GetRingExposureRange", (swig_wrapper_func) _wrap_GetRingExposureRange, NULL},
    { SWIG_prefix "GetSDK3Handle", (swig_wrapper_func) _wrap_GetSDK3Handle, NULL},
    { SWIG_prefix "GetSensitivity", (swig_wrapper_func) _wrap_GetSensitivity, NULL},
    { SWIG_prefix "GetShutterMinTimes", (swig_wrapper_func) _wrap_GetShutterMinTimes, NULL},
    { SWIG_prefix "GetSizeOfCircularBuffer", (swig_wrapper_func) _wrap_GetSizeOfCircularBuffer, NULL},
    { SWIG_prefix "GetSlotBusDeviceFunction", (swig_wrapper_func) _wrap_GetSlotBusDeviceFunction, NULL},
    { SWIG_prefix "GetSoftwareVersion", (swig_wrapper_func) _wrap_GetSoftwareVersion, NULL},
    { SWIG_prefix "GetSpoolProgress", (swig_wrapper_func) _wrap_GetSpoolProgress, NULL},
    { SWIG_prefix "GetTemperature", (swig_wrapper_func) _wrap_GetTemperature, NULL},
    { SWIG_prefix "GetTemperatureF", (swig_wrapper_func) _wrap_GetTemperatureF, NULL},
    { SWIG_prefix "GetTemperatureRange", (swig_wrapper_func) _wrap_GetTemperatureRange, NULL},
    { SWIG_prefix "GetTemperaturePrecision", (swig_wrapper_func) _wrap_GetTemperaturePrecision, NULL},
    { SWIG_prefix "GetTemperatureStatus", (swig_wrapper_func) _wrap_GetTemperatureStatus, NULL},
    { SWIG_prefix "GetIODirection", (swig_wrapper_func) _wrap_GetIODirection, NULL},
    { SWIG_prefix "GetIOLevel", (swig_wrapper_func) _wrap_GetIOLevel, NULL},
    { SWIG_prefix "GetUSBDeviceDetails", (swig_wrapper_func) _wrap_GetUSBDeviceDetails, NULL},
    { SWIG_prefix "GetVersionInfo", (swig_wrapper_func) _wrap_GetVersionInfo, NULL},
    { SWIG_prefix "GetVerticalSpeed", (swig_wrapper_func) _wrap_GetVerticalSpeed, NULL},
    { SWIG_prefix "GetVirtualDMAAddress", (swig_wrapper_func) _wrap_GetVirtualDMAAddress, NULL},
    { SWIG_prefix "GetVSAmplitudeString", (swig_wrapper_func) _wrap_GetVSAmplitudeString, NULL},
    { SWIG_prefix "GetVSAmplitudeFromString", (swig_wrapper_func) _wrap_GetVSAmplitudeFromString, NULL},
    { SWIG_prefix "GetVSAmplitudeValue", (swig_wrapper_func) _wrap_GetVSAmplitudeValue, NULL},
    { SWIG_prefix "GetVSSpeed", (swig_wrapper_func) _wrap_GetVSSpeed, NULL},
    { SWIG_prefix "GPIBReceive", (swig_wrapper_func) _wrap_GPIBReceive, NULL},
    { SWIG_prefix "GPIBSend", (swig_wrapper_func) _wrap_GPIBSend, NULL},
    { SWIG_prefix "I2CBurstRead", (swig_wrapper_func) _wrap_I2CBurstRead, NULL},
    { SWIG_prefix "I2CBurstWrite", (swig_wrapper_func) _wrap_I2CBurstWrite, NULL},
    { SWIG_prefix "I2CRead", (swig_wrapper_func) _wrap_I2CRead, NULL},
    { SWIG_prefix "I2CReset", (swig_wrapper_func) _wrap_I2CReset, NULL},
    { SWIG_prefix "I2CWrite", (swig_wrapper_func) _wrap_I2CWrite, NULL},
    { SWIG_prefix "IdAndorDll", (swig_wrapper_func) _wrap_IdAndorDll, NULL},
    { SWIG_prefix "InAuxPort", (swig_wrapper_func) _wrap_InAuxPort, NULL},
    { SWIG_prefix "Initialize", (swig_wrapper_func) _wrap_Initialize, NULL},
    { SWIG_prefix "InitializeDevice", (swig_wrapper_func) _wrap_InitializeDevice, NULL},
    { SWIG_prefix "IsAmplifierAvailable", (swig_wrapper_func) _wrap_IsAmplifierAvailable, NULL},
    { SWIG_prefix "IsCountConvertModeAvailable", (swig_wrapper_func) _wrap_IsCountConvertModeAvailable, NULL},
    { SWIG_prefix "IsPreAmpGainAvailable", (swig_wrapper_func) _wrap_IsPreAmpGainAvailable, NULL},
    { SWIG_prefix "IsReadoutFlippedByAmplifier", (swig_wrapper_func) _wrap_IsReadoutFlippedByAmplifier, NULL},
    { SWIG_prefix "IsTriggerModeAvailable", (swig_wrapper_func) _wrap_IsTriggerModeAvailable, NULL},
    { SWIG_prefix "Merge", (swig_wrapper_func) _wrap_Merge, NULL},
    { SWIG_prefix "OutAuxPort", (swig_wrapper_func) _wrap_OutAuxPort, NULL},
    { SWIG_prefix "PrepareAcquisition", (swig_wrapper_func) _wrap_PrepareAcquisition, NULL},
    { SWIG_prefix "SaveAsBmp", (swig_wrapper_func) _wrap_SaveAsBmp, NULL},
    { SWIG_prefix "SaveAsCommentedSif", (swig_wrapper_func) _wrap_SaveAsCommentedSif, NULL},
    { SWIG_prefix "SaveAsEDF", (swig_wrapper_func) _wrap_SaveAsEDF, NULL},
    { SWIG_prefix "SaveAsFITS", (swig_wrapper_func) _wrap_SaveAsFITS, NULL},
    { SWIG_prefix "SaveAsRaw", (swig_wrapper_func) _wrap_SaveAsRaw, NULL},
    { SWIG_prefix "SaveAsSif", (swig_wrapper_func) _wrap_SaveAsSif, NULL},
    { SWIG_prefix "SaveAsTiff", (swig_wrapper_func) _wrap_SaveAsTiff, NULL},
    { SWIG_prefix "SaveAsTiffEx", (swig_wrapper_func) _wrap_SaveAsTiffEx, NULL},
    { SWIG_prefix "SaveEEPROMToFile", (swig_wrapper_func) _wrap_SaveEEPROMToFile, NULL},
    { SWIG_prefix "SaveToClipBoard", (swig_wrapper_func) _wrap_SaveToClipBoard, NULL},
    { SWIG_prefix "SelectDevice", (swig_wrapper_func) _wrap_SelectDevice, NULL},
    { SWIG_prefix "SendSoftwareTrigger", (swig_wrapper_func) _wrap_SendSoftwareTrigger, NULL},
    { SWIG_prefix "SetAccumulationCycleTime", (swig_wrapper_func) _wrap_SetAccumulationCycleTime, NULL},
    { SWIG_prefix "SetAcquisitionMode", (swig_wrapper_func) _wrap_SetAcquisitionMode, NULL},
    { SWIG_prefix "SetSensorPortMode", (swig_wrapper_func) _wrap_SetSensorPortMode, NULL},
    { SWIG_prefix "SelectSensorPort", (swig_wrapper_func) _wrap_SelectSensorPort, NULL},
    { SWIG_prefix "SetAcquisitionType", (swig_wrapper_func) _wrap_SetAcquisitionType, NULL},
    { SWIG_prefix "SetADChannel", (swig_wrapper_func) _wrap_SetADChannel, NULL},
    { SWIG_prefix "SetAdvancedTriggerModeState", (swig_wrapper_func) _wrap_SetAdvancedTriggerModeState, NULL},
    { SWIG_prefix "SetBackground", (swig_wrapper_func) _wrap_SetBackground, NULL},
    { SWIG_prefix "SetBaselineClamp", (swig_wrapper_func) _wrap_SetBaselineClamp, NULL},
    { SWIG_prefix "SetBaselineOffset", (swig_wrapper_func) _wrap_SetBaselineOffset, NULL},
    { SWIG_prefix "SetCameraLinkMode", (swig_wrapper_func) _wrap_SetCameraLinkMode, NULL},
    { SWIG_prefix "SetCameraStatusEnable", (swig_wrapper_func) _wrap_SetCameraStatusEnable, NULL},
    { SWIG_prefix "SetChargeShifting", (swig_wrapper_func) _wrap_SetChargeShifting, NULL},
    { SWIG_prefix "SetComplexImage", (swig_wrapper_func) _wrap_SetComplexImage, NULL},
    { SWIG_prefix "SetCoolerMode", (swig_wrapper_func) _wrap_SetCoolerMode, NULL},
    { SWIG_prefix "SetCountConvertMode", (swig_wrapper_func) _wrap_SetCountConvertMode, NULL},
    { SWIG_prefix "SetCountConvertWavelength", (swig_wrapper_func) _wrap_SetCountConvertWavelength, NULL},
    { SWIG_prefix "SetCropMode", (swig_wrapper_func) _wrap_SetCropMode, NULL},
    { SWIG_prefix "SetCurrentCamera", (swig_wrapper_func) _wrap_SetCurrentCamera, NULL},
    { SWIG_prefix "SetCustomTrackHBin", (swig_wrapper_func) _wrap_SetCustomTrackHBin, NULL},
    { SWIG_prefix "SetDataType", (swig_wrapper_func) _wrap_SetDataType, NULL},
    { SWIG_prefix "SetDACOutput", (swig_wrapper_func) _wrap_SetDACOutput, NULL},
    { SWIG_prefix "SetDACOutputScale", (swig_wrapper_func) _wrap_SetDACOutputScale, NULL},
    { SWIG_prefix "SetDDGAddress", (swig_wrapper_func) _wrap_SetDDGAddress, NULL},
    { SWIG_prefix "SetDDGExternalOutputEnabled", (swig_wrapper_func) _wrap_SetDDGExternalOutputEnabled, NULL},
    { SWIG_prefix "SetDDGExternalOutputPolarity", (swig_wrapper_func) _wrap_SetDDGExternalOutputPolarity, NULL},
    { SWIG_prefix "SetDDGExternalOutputStepEnabled", (swig_wrapper_func) _wrap_SetDDGExternalOutputStepEnabled, NULL},
    { SWIG_prefix "SetDDGExternalOutputTime", (swig_wrapper_func) _wrap_SetDDGExternalOutputTime, NULL},
    { SWIG_prefix "SetDDGGain", (swig_wrapper_func) _wrap_SetDDGGain, NULL},
    { SWIG_prefix "SetDDGGateStep", (swig_wrapper_func) _wrap_SetDDGGateStep, NULL},
    { SWIG_prefix "SetDDGGateTime", (swig_wrapper_func) _wrap_SetDDGGateTime, NULL},
    { SWIG_prefix "SetDDGInsertionDelay", (swig_wrapper_func) _wrap_SetDDGInsertionDelay, NULL},
    { SWIG_prefix "SetDDGIntelligate", (swig_wrapper_func) _wrap_SetDDGIntelligate, NULL},
    { SWIG_prefix "SetDDGIOC", (swig_wrapper_func) _wrap_SetDDGIOC, NULL},
    { SWIG_prefix "SetDDGIOCFrequency", (swig_wrapper_func) _wrap_SetDDGIOCFrequency, NULL},
    { SWIG_prefix "SetDDGIOCNumber", (swig_wrapper_func) _wrap_SetDDGIOCNumber, NULL},
    { SWIG_prefix "SetDDGIOCPeriod", (swig_wrapper_func) _wrap_SetDDGIOCPeriod, NULL},
    { SWIG_prefix "SetDDGIOCTrigger", (swig_wrapper_func) _wrap_SetDDGIOCTrigger, NULL},
    { SWIG_prefix "SetDDGOpticalWidthEnabled", (swig_wrapper_func) _wrap_SetDDGOpticalWidthEnabled, NULL},
    { SWIG_prefix "SetDDGLiteGlobalControlByte", (swig_wrapper_func) _wrap_SetDDGLiteGlobalControlByte, NULL},
    { SWIG_prefix "SetDDGLiteControlByte", (swig_wrapper_func) _wrap_SetDDGLiteControlByte, NULL},
    { SWIG_prefix "SetDDGLiteInitialDelay", (swig_wrapper_func) _wrap_SetDDGLiteInitialDelay, NULL},
    { SWIG_prefix "SetDDGLitePulseWidth", (swig_wrapper_func) _wrap_SetDDGLitePulseWidth, NULL},
    { SWIG_prefix "SetDDGLiteInterPulseDelay", (swig_wrapper_func) _wrap_SetDDGLiteInterPulseDelay, NULL},
    { SWIG_prefix "SetDDGLitePulsesPerExposure", (swig_wrapper_func) _wrap_SetDDGLitePulsesPerExposure, NULL},
    { SWIG_prefix "SetDDGStepCoefficients", (swig_wrapper_func) _wrap_SetDDGStepCoefficients, NULL},
    { SWIG_prefix "SetDDGWidthStepCoefficients", (swig_wrapper_func) _wrap_SetDDGWidthStepCoefficients, NULL},
    { SWIG_prefix "SetDDGStepMode", (swig_wrapper_func) _wrap_SetDDGStepMode, NULL},
    { SWIG_prefix "SetDDGWidthStepMode", (swig_wrapper_func) _wrap_SetDDGWidthStepMode, NULL},
    { SWIG_prefix "SetDDGTimes", (swig_wrapper_func) _wrap_SetDDGTimes, NULL},
    { SWIG_prefix "SetDDGTriggerMode", (swig_wrapper_func) _wrap_SetDDGTriggerMode, NULL},
    { SWIG_prefix "SetDDGVariableGateStep", (swig_wrapper_func) _wrap_SetDDGVariableGateStep, NULL},
    { SWIG_prefix "SetDelayGenerator", (swig_wrapper_func) _wrap_SetDelayGenerator, NULL},
    { SWIG_prefix "SetDMAParameters", (swig_wrapper_func) _wrap_SetDMAParameters, NULL},
    { SWIG_prefix "SetEMAdvanced", (swig_wrapper_func) _wrap_SetEMAdvanced, NULL},
    { SWIG_prefix "SetEMCCDGain", (swig_wrapper_func) _wrap_SetEMCCDGain, NULL},
    { SWIG_prefix "SetEMClockCompensation", (swig_wrapper_func) _wrap_SetEMClockCompensation, NULL},
    { SWIG_prefix "SetEMGainMode", (swig_wrapper_func) _wrap_SetEMGainMode, NULL},
    { SWIG_prefix "SetExposureTime", (swig_wrapper_func) _wrap_SetExposureTime, NULL},
    { SWIG_prefix "SetExternalTriggerTermination", (swig_wrapper_func) _wrap_SetExternalTriggerTermination, NULL},
    { SWIG_prefix "SetFanMode", (swig_wrapper_func) _wrap_SetFanMode, NULL},
    { SWIG_prefix "SetFastExtTrigger", (swig_wrapper_func) _wrap_SetFastExtTrigger, NULL},
    { SWIG_prefix "SetFastKinetics", (swig_wrapper_func) _wrap_SetFastKinetics, NULL},
    { SWIG_prefix "SetFastKineticsEx", (swig_wrapper_func) _wrap_SetFastKineticsEx, NULL},
    { SWIG_prefix "SetFastKineticsStorageMode", (swig_wrapper_func) _wrap_SetFastKineticsStorageMode, NULL},
    { SWIG_prefix "SetFastKineticsTimeScanMode", (swig_wrapper_func) _wrap_SetFastKineticsTimeScanMode, NULL},
    { SWIG_prefix "SetFilterMode", (swig_wrapper_func) _wrap_SetFilterMode, NULL},
    { SWIG_prefix "SetFilterParameters", (swig_wrapper_func) _wrap_SetFilterParameters, NULL},
    { SWIG_prefix "SetFKVShiftSpeed", (swig_wrapper_func) _wrap_SetFKVShiftSpeed, NULL},
    { SWIG_prefix "SetFPDP", (swig_wrapper_func) _wrap_SetFPDP, NULL},
    { SWIG_prefix "SetFrameTransferMode", (swig_wrapper_func) _wrap_SetFrameTransferMode, NULL},
    { SWIG_prefix "SetFullImage", (swig_wrapper_func) _wrap_SetFullImage, NULL},
    { SWIG_prefix "SetFVBHBin", (swig_wrapper_func) _wrap_SetFVBHBin, NULL},
    { SWIG_prefix "SetGain", (swig_wrapper_func) _wrap_SetGain, NULL},
    { SWIG_prefix "SetGate", (swig_wrapper_func) _wrap_SetGate, NULL},
    { SWIG_prefix "SetGateMode", (swig_wrapper_func) _wrap_SetGateMode, NULL},
    { SWIG_prefix "SetHighCapacity", (swig_wrapper_func) _wrap_SetHighCapacity, NULL},
    { SWIG_prefix "SetHorizontalSpeed", (swig_wrapper_func) _wrap_SetHorizontalSpeed, NULL},
    { SWIG_prefix "SetHSSpeed", (swig_wrapper_func) _wrap_SetHSSpeed, NULL},
    { SWIG_prefix "SetImage", (swig_wrapper_func) _wrap_SetImage, NULL},
    { SWIG_prefix "SetImageFlip", (swig_wrapper_func) _wrap_SetImageFlip, NULL},
    { SWIG_prefix "SetImageRotate", (swig_wrapper_func) _wrap_SetImageRotate, NULL},
    { SWIG_prefix "SetIsolatedCropMode", (swig_wrapper_func) _wrap_SetIsolatedCropMode, NULL},
    { SWIG_prefix "SetIsolatedCropModeEx", (swig_wrapper_func) _wrap_SetIsolatedCropModeEx, NULL},
    { SWIG_prefix "SetKineticCycleTime", (swig_wrapper_func) _wrap_SetKineticCycleTime, NULL},
    { SWIG_prefix "SetMCPGain", (swig_wrapper_func) _wrap_SetMCPGain, NULL},
    { SWIG_prefix "SetMCPGating", (swig_wrapper_func) _wrap_SetMCPGating, NULL},
    { SWIG_prefix "SetMessageWindow", (swig_wrapper_func) _wrap_SetMessageWindow, NULL},
    { SWIG_prefix "SetMetaData", (swig_wrapper_func) _wrap_SetMetaData, NULL},
    { SWIG_prefix "SetMultiTrack", (swig_wrapper_func) _wrap_SetMultiTrack, NULL},
    { SWIG_prefix "SetMultiTrackHBin", (swig_wrapper_func) _wrap_SetMultiTrackHBin, NULL},
    { SWIG_prefix "SetMultiTrackHRange", (swig_wrapper_func) _wrap_SetMultiTrackHRange, NULL},
    { SWIG_prefix "SetMultiTrackScan", (swig_wrapper_func) _wrap_SetMultiTrackScan, NULL},
    { SWIG_prefix "SetNextAddress", (swig_wrapper_func) _wrap_SetNextAddress, NULL},
    { SWIG_prefix "SetNumberAccumulations", (swig_wrapper_func) _wrap_SetNumberAccumulations, NULL},
    { SWIG_prefix "SetNumberKinetics", (swig_wrapper_func) _wrap_SetNumberKinetics, NULL},
    { SWIG_prefix "SetNumberPrescans", (swig_wrapper_func) _wrap_SetNumberPrescans, NULL},
    { SWIG_prefix "SetOutputAmplifier", (swig_wrapper_func) _wrap_SetOutputAmplifier, NULL},
    { SWIG_prefix "SetOverlapMode", (swig_wrapper_func) _wrap_SetOverlapMode, NULL},
    { SWIG_prefix "SetPhotonCounting", (swig_wrapper_func) _wrap_SetPhotonCounting, NULL},
    { SWIG_prefix "SetPhotonCountingThreshold", (swig_wrapper_func) _wrap_SetPhotonCountingThreshold, NULL},
    { SWIG_prefix "SetPhotonCountingDivisions", (swig_wrapper_func) _wrap_SetPhotonCountingDivisions, NULL},
    { SWIG_prefix "SetPixelMode", (swig_wrapper_func) _wrap_SetPixelMode, NULL},
    { SWIG_prefix "SetPreAmpGain", (swig_wrapper_func) _wrap_SetPreAmpGain, NULL},
    { SWIG_prefix "SetDualExposureTimes", (swig_wrapper_func) _wrap_SetDualExposureTimes, NULL},
    { SWIG_prefix "SetDualExposureMode", (swig_wrapper_func) _wrap_SetDualExposureMode, NULL},
    { SWIG_prefix "SetRandomTracks", (swig_wrapper_func) _wrap_SetRandomTracks, NULL},
    { SWIG_prefix "SetReadMode", (swig_wrapper_func) _wrap_SetReadMode, NULL},
    { SWIG_prefix "SetReadoutRegisterPacking", (swig_wrapper_func) _wrap_SetReadoutRegisterPacking, NULL},
    { SWIG_prefix "SetRegisterDump", (swig_wrapper_func) _wrap_SetRegisterDump, NULL},
    { SWIG_prefix "SetRingExposureTimes", (swig_wrapper_func) _wrap_SetRingExposureTimes, NULL},
    { SWIG_prefix "SetShutter", (swig_wrapper_func) _wrap_SetShutter, NULL},
    { SWIG_prefix "SetShutterEx", (swig_wrapper_func) _wrap_SetShutterEx, NULL},
    { SWIG_prefix "SetShutters", (swig_wrapper_func) _wrap_SetShutters, NULL},
    { SWIG_prefix "SetSifComment", (swig_wrapper_func) _wrap_SetSifComment, NULL},
    { SWIG_prefix "SetSingleTrack", (swig_wrapper_func) _wrap_SetSingleTrack, NULL},
    { SWIG_prefix "SetSingleTrackHBin", (swig_wrapper_func) _wrap_SetSingleTrackHBin, NULL},
    { SWIG_prefix "SetSpool", (swig_wrapper_func) _wrap_SetSpool, NULL},
    { SWIG_prefix "SetSpoolThreadCount", (swig_wrapper_func) _wrap_SetSpoolThreadCount, NULL},
    { SWIG_prefix "SetStorageMode", (swig_wrapper_func) _wrap_SetStorageMode, NULL},
    { SWIG_prefix "SetTemperature", (swig_wrapper_func) _wrap_SetTemperature, NULL},
    { SWIG_prefix "SetTriggerMode", (swig_wrapper_func) _wrap_SetTriggerMode, NULL},
    { SWIG_prefix "SetTriggerInvert", (swig_wrapper_func) _wrap_SetTriggerInvert, NULL},
    { SWIG_prefix "GetTriggerLevelRange", (swig_wrapper_func) _wrap_GetTriggerLevelRange, NULL},
    { SWIG_prefix "SetTriggerLevel", (swig_wrapper_func) _wrap_SetTriggerLevel, NULL},
    { SWIG_prefix "SetIODirection", (swig_wrapper_func) _wrap_SetIODirection, NULL},
    { SWIG_prefix "SetIOLevel", (swig_wrapper_func) _wrap_SetIOLevel, NULL},
    { SWIG_prefix "SetUSGenomics", (swig_wrapper_func) _wrap_SetUSGenomics, NULL},
    { SWIG_prefix "SetVerticalRowBuffer", (swig_wrapper_func) _wrap_SetVerticalRowBuffer, NULL},
    { SWIG_prefix "SetVerticalSpeed", (swig_wrapper_func) _wrap_SetVerticalSpeed, NULL},
    { SWIG_prefix "SetVirtualChip", (swig_wrapper_func) _wrap_SetVirtualChip, NULL},
    { SWIG_prefix "SetVSAmplitude", (swig_wrapper_func) _wrap_SetVSAmplitude, NULL},
    { SWIG_prefix "SetVSSpeed", (swig_wrapper_func) _wrap_SetVSSpeed, NULL},
    { SWIG_prefix "ShutDown", (swig_wrapper_func) _wrap_ShutDown, NULL},
    { SWIG_prefix "StartAcquisition", (swig_wrapper_func) _wrap_StartAcquisition, NULL},
    { SWIG_prefix "UpdateDDGTimings", (swig_wrapper_func) _wrap_UpdateDDGTimings, NULL},
    { SWIG_prefix "WaitForAcquisition", (swig_wrapper_func) _wrap_WaitForAcquisition, NULL},
    { SWIG_prefix "WaitForAcquisitionByHandle", (swig_wrapper_func) _wrap_WaitForAcquisitionByHandle, NULL},
    { SWIG_prefix "WaitForAcquisitionByHandleTimeOut", (swig_wrapper_func) _wrap_WaitForAcquisitionByHandleTimeOut, NULL},
    { SWIG_prefix "WaitForAcquisitionTimeOut", (swig_wrapper_func) _wrap_WaitForAcquisitionTimeOut, NULL},
    { SWIG_prefix "WhiteBalance", (swig_wrapper_func) _wrap_WhiteBalance, NULL},
    { SWIG_prefix "OA_Initialize", (swig_wrapper_func) _wrap_OA_Initialize, NULL},
    { SWIG_prefix "OA_EnableMode", (swig_wrapper_func) _wrap_OA_EnableMode, NULL},
    { SWIG_prefix "OA_GetModeAcqParams", (swig_wrapper_func) _wrap_OA_GetModeAcqParams, NULL},
    { SWIG_prefix "OA_GetUserModeNames", (swig_wrapper_func) _wrap_OA_GetUserModeNames, NULL},
    { SWIG_prefix "OA_GetPreSetModeNames", (swig_wrapper_func) _wrap_OA_GetPreSetModeNames, NULL},
    { SWIG_prefix "OA_GetNumberOfUserModes", (swig_wrapper_func) _wrap_OA_GetNumberOfUserModes, NULL},
    { SWIG_prefix "OA_GetNumberOfPreSetModes", (swig_wrapper_func) _wrap_OA_GetNumberOfPreSetModes, NULL},
    { SWIG_prefix "OA_GetNumberOfAcqParams", (swig_wrapper_func) _wrap_OA_GetNumberOfAcqParams, NULL},
    { SWIG_prefix "OA_AddMode", (swig_wrapper_func) _wrap_OA_AddMode, NULL},
    { SWIG_prefix "OA_WriteToFile", (swig_wrapper_func) _wrap_OA_WriteToFile, NULL},
    { SWIG_prefix "OA_DeleteMode", (swig_wrapper_func) _wrap_OA_DeleteMode, NULL},
    { SWIG_prefix "OA_SetInt", (swig_wrapper_func) _wrap_OA_SetInt, NULL},
    { SWIG_prefix "OA_SetFloat", (swig_wrapper_func) _wrap_OA_SetFloat, NULL},
    { SWIG_prefix "OA_SetString", (swig_wrapper_func) _wrap_OA_SetString, NULL},
    { SWIG_prefix "OA_GetInt", (swig_wrapper_func) _wrap_OA_GetInt, NULL},
    { SWIG_prefix "OA_GetFloat", (swig_wrapper_func) _wrap_OA_GetFloat, NULL},
    { SWIG_prefix "OA_GetString", (swig_wrapper_func) _wrap_OA_GetString, NULL},
    { SWIG_prefix "Filter_SetMode", (swig_wrapper_func) _wrap_Filter_SetMode, NULL},
    { SWIG_prefix "Filter_SetThreshold", (swig_wrapper_func) _wrap_Filter_SetThreshold, NULL},
    { SWIG_prefix "Filter_SetDataAveragingMode", (swig_wrapper_func) _wrap_Filter_SetDataAveragingMode, NULL},
    { SWIG_prefix "Filter_SetAveragingFrameCount", (swig_wrapper_func) _wrap_Filter_SetAveragingFrameCount, NULL},
    { SWIG_prefix "Filter_SetAveragingFactor", (swig_wrapper_func) _wrap_Filter_SetAveragingFactor, NULL},
    { SWIG_prefix "PostProcessNoiseFilter", (swig_wrapper_func) _wrap_PostProcessNoiseFilter, NULL},
    { SWIG_prefix "PostProcessCountConvert", (swig_wrapper_func) _wrap_PostProcessCountConvert, NULL},
    { SWIG_prefix "PostProcessPhotonCounting", (swig_wrapper_func) _wrap_PostProcessPhotonCounting, NULL},
    { SWIG_prefix "PostProcessDataAveraging", (swig_wrapper_func) _wrap_PostProcessDataAveraging, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ushortArrayTo_p_unsigned_short(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((unsigned short *)  ((ushortArray *) x));
}
static swig_type_info _swigt__p_ANDORCAPS = {"_p_ANDORCAPS", "AndorCapabilities *|ANDORCAPS *", 0, 0, (void*)&_wrap_class_ANDORCAPS, 0};
static swig_type_info _swigt__p_AT_DDGLiteChannelId = {"_p_AT_DDGLiteChannelId", "enum AT_DDGLiteChannelId *|AT_DDGLiteChannelId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AT_VersionInfoId = {"_p_AT_VersionInfoId", "enum AT_VersionInfoId *|AT_VersionInfoId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_COLORDEMOSAICINFO = {"_p_COLORDEMOSAICINFO", "COLORDEMOSAICINFO *|ColorDemosaicInfo *", 0, 0, (void*)&_wrap_class_COLORDEMOSAICINFO, 0};
static swig_type_info _swigt__p_SYSTEMTIME = {"_p_SYSTEMTIME", "SYSTEMTIME *", 0, 0, (void*)&_wrap_class_SYSTEMTIME, 0};
static swig_type_info _swigt__p_WHITEBALANCEINFO = {"_p_WHITEBALANCEINFO", "WHITEBALANCEINFO *|WhiteBalanceInfo *", 0, 0, (void*)&_wrap_class_WHITEBALANCEINFO, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ushortArray = {"_p_ushortArray", "ushortArray *", 0, 0, (void*)&_wrap_class_ushortArray, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ANDORCAPS,
  &_swigt__p_AT_DDGLiteChannelId,
  &_swigt__p_AT_VersionInfoId,
  &_swigt__p_COLORDEMOSAICINFO,
  &_swigt__p_SYSTEMTIME,
  &_swigt__p_WHITEBALANCEINFO,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_void,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_ushortArray,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_ANDORCAPS[] = {  {&_swigt__p_ANDORCAPS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AT_DDGLiteChannelId[] = {  {&_swigt__p_AT_DDGLiteChannelId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AT_VersionInfoId[] = {  {&_swigt__p_AT_VersionInfoId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_COLORDEMOSAICINFO[] = {  {&_swigt__p_COLORDEMOSAICINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SYSTEMTIME[] = {  {&_swigt__p_SYSTEMTIME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WHITEBALANCEINFO[] = {  {&_swigt__p_WHITEBALANCEINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_ushortArray, _p_ushortArrayTo_p_unsigned_short, 0, 0},  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ushortArray[] = {  {&_swigt__p_ushortArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ANDORCAPS,
  _swigc__p_AT_DDGLiteChannelId,
  _swigc__p_AT_VersionInfoId,
  _swigc__p_COLORDEMOSAICINFO,
  _swigc__p_SYSTEMTIME,
  _swigc__p_WHITEBALANCEINFO,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_void,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_ushortArray,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  
  
  SWIG_Tcl_SetConstantObj(interp, "AT_SDKVersion", SWIG_From_int(static_cast< int >(AT_SDKVersion)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DeviceDriverVersion", SWIG_From_int(static_cast< int >(AT_DeviceDriverVersion)));
  SWIG_Tcl_SetConstantObj(interp, "AT_NoOfVersionInfoIds", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AT_VERSION_INFO_LEN", SWIG_From_int(static_cast< int >(80)));
  SWIG_Tcl_SetConstantObj(interp, "AT_CONTROLLER_CARD_MODEL_LEN", SWIG_From_int(static_cast< int >(80)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ChannelA", SWIG_From_int(static_cast< int >(AT_DDGLite_ChannelA)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ChannelB", SWIG_From_int(static_cast< int >(AT_DDGLite_ChannelB)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ChannelC", SWIG_From_int(static_cast< int >(AT_DDGLite_ChannelC)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_GlobalEnable", SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_ChannelEnable", SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_FreeRun", SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_DisableOnFrame", SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_RestartOnFire", SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_Invert", SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDGLite_ControlBit_EnableOnFire", SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDG_POLARITY_POSITIVE", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDG_POLARITY_NEGATIVE", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDG_TERMINATION_50OHMS", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "AT_DDG_TERMINATION_HIGHZ", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AT_STEPMODE_CONSTANT", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "AT_STEPMODE_EXPONENTIAL", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AT_STEPMODE_LOGARITHMIC", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AT_STEPMODE_LINEAR", SWIG_From_int(static_cast< int >(3)));
  SWIG_Tcl_SetConstantObj(interp, "AT_STEPMODE_OFF", SWIG_From_int(static_cast< int >(100)));
  SWIG_Tcl_SetConstantObj(interp, "AT_GATEMODE_FIRE_AND_GATE", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "AT_GATEMODE_FIRE_ONLY", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AT_GATEMODE_GATE_ONLY", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AT_GATEMODE_CW_ON", SWIG_From_int(static_cast< int >(3)));
  SWIG_Tcl_SetConstantObj(interp, "AT_GATEMODE_CW_OFF", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AT_GATEMODE_DDG", SWIG_From_int(static_cast< int >(5)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_CODES", SWIG_From_int(static_cast< int >(20001)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_SUCCESS", SWIG_From_int(static_cast< int >(20002)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_VXDNOTINSTALLED", SWIG_From_int(static_cast< int >(20003)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_SCAN", SWIG_From_int(static_cast< int >(20004)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_CHECK_SUM", SWIG_From_int(static_cast< int >(20005)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_FILELOAD", SWIG_From_int(static_cast< int >(20006)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_UNKNOWN_FUNCTION", SWIG_From_int(static_cast< int >(20007)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_VXD_INIT", SWIG_From_int(static_cast< int >(20008)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_ADDRESS", SWIG_From_int(static_cast< int >(20009)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_PAGELOCK", SWIG_From_int(static_cast< int >(20010)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_PAGEUNLOCK", SWIG_From_int(static_cast< int >(20011)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_BOARDTEST", SWIG_From_int(static_cast< int >(20012)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_ACK", SWIG_From_int(static_cast< int >(20013)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_UP_FIFO", SWIG_From_int(static_cast< int >(20014)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_PATTERN", SWIG_From_int(static_cast< int >(20015)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ACQUISITION_ERRORS", SWIG_From_int(static_cast< int >(20017)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ACQ_BUFFER", SWIG_From_int(static_cast< int >(20018)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ACQ_DOWNFIFO_FULL", SWIG_From_int(static_cast< int >(20019)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_PROC_UNKONWN_INSTRUCTION", SWIG_From_int(static_cast< int >(20020)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ILLEGAL_OP_CODE", SWIG_From_int(static_cast< int >(20021)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_KINETIC_TIME_NOT_MET", SWIG_From_int(static_cast< int >(20022)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ACCUM_TIME_NOT_MET", SWIG_From_int(static_cast< int >(20023)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_NO_NEW_DATA", SWIG_From_int(static_cast< int >(20024)));
  SWIG_Tcl_SetConstantObj(interp, "KERN_MEM_ERROR", SWIG_From_int(static_cast< int >(20025)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_SPOOLERROR", SWIG_From_int(static_cast< int >(20026)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_SPOOLSETUPERROR", SWIG_From_int(static_cast< int >(20027)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_FILESIZELIMITERROR", SWIG_From_int(static_cast< int >(20028)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_FILESAVE", SWIG_From_int(static_cast< int >(20029)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_CODES", SWIG_From_int(static_cast< int >(20033)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_OFF", SWIG_From_int(static_cast< int >(20034)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_NOT_STABILIZED", SWIG_From_int(static_cast< int >(20035)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_STABILIZED", SWIG_From_int(static_cast< int >(20036)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_NOT_REACHED", SWIG_From_int(static_cast< int >(20037)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_OUT_RANGE", SWIG_From_int(static_cast< int >(20038)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_NOT_SUPPORTED", SWIG_From_int(static_cast< int >(20039)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPERATURE_DRIFT", SWIG_From_int(static_cast< int >(20040)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_CODES", SWIG_From_int(static_cast< int >(20033)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_OFF", SWIG_From_int(static_cast< int >(20034)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_NOT_STABILIZED", SWIG_From_int(static_cast< int >(20035)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_STABILIZED", SWIG_From_int(static_cast< int >(20036)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_NOT_REACHED", SWIG_From_int(static_cast< int >(20037)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_OUT_RANGE", SWIG_From_int(static_cast< int >(20038)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_NOT_SUPPORTED", SWIG_From_int(static_cast< int >(20039)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMP_DRIFT", SWIG_From_int(static_cast< int >(20040)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_GENERAL_ERRORS", SWIG_From_int(static_cast< int >(20049)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_AUX", SWIG_From_int(static_cast< int >(20050)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_COF_NOTLOADED", SWIG_From_int(static_cast< int >(20051)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_FPGAPROG", SWIG_From_int(static_cast< int >(20052)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_FLEXERROR", SWIG_From_int(static_cast< int >(20053)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_GPIBERROR", SWIG_From_int(static_cast< int >(20054)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_EEPROMVERSIONERROR", SWIG_From_int(static_cast< int >(20055)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_DATATYPE", SWIG_From_int(static_cast< int >(20064)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_DRIVER_ERRORS", SWIG_From_int(static_cast< int >(20065)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P1INVALID", SWIG_From_int(static_cast< int >(20066)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P2INVALID", SWIG_From_int(static_cast< int >(20067)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P3INVALID", SWIG_From_int(static_cast< int >(20068)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P4INVALID", SWIG_From_int(static_cast< int >(20069)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INIERROR", SWIG_From_int(static_cast< int >(20070)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_COFERROR", SWIG_From_int(static_cast< int >(20071)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ACQUIRING", SWIG_From_int(static_cast< int >(20072)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_IDLE", SWIG_From_int(static_cast< int >(20073)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_TEMPCYCLE", SWIG_From_int(static_cast< int >(20074)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_NOT_INITIALIZED", SWIG_From_int(static_cast< int >(20075)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P5INVALID", SWIG_From_int(static_cast< int >(20076)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P6INVALID", SWIG_From_int(static_cast< int >(20077)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_MODE", SWIG_From_int(static_cast< int >(20078)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_FILTER", SWIG_From_int(static_cast< int >(20079)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_I2CERRORS", SWIG_From_int(static_cast< int >(20080)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_I2CDEVNOTFOUND", SWIG_From_int(static_cast< int >(20081)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_I2CTIMEOUT", SWIG_From_int(static_cast< int >(20082)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P7INVALID", SWIG_From_int(static_cast< int >(20083)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P8INVALID", SWIG_From_int(static_cast< int >(20084)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P9INVALID", SWIG_From_int(static_cast< int >(20085)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P10INVALID", SWIG_From_int(static_cast< int >(20086)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_P11INVALID", SWIG_From_int(static_cast< int >(20087)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_USBERROR", SWIG_From_int(static_cast< int >(20089)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_IOCERROR", SWIG_From_int(static_cast< int >(20090)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_VRMVERSIONERROR", SWIG_From_int(static_cast< int >(20091)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_GATESTEPERROR", SWIG_From_int(static_cast< int >(20092)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_USB_INTERRUPT_ENDPOINT_ERROR", SWIG_From_int(static_cast< int >(20093)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_RANDOM_TRACK_ERROR", SWIG_From_int(static_cast< int >(20094)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_TRIGGER_MODE", SWIG_From_int(static_cast< int >(20095)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_LOAD_FIRMWARE_ERROR", SWIG_From_int(static_cast< int >(20096)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_DIVIDE_BY_ZERO_ERROR", SWIG_From_int(static_cast< int >(20097)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_RINGEXPOSURES", SWIG_From_int(static_cast< int >(20098)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_BINNING_ERROR", SWIG_From_int(static_cast< int >(20099)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_AMPLIFIER", SWIG_From_int(static_cast< int >(20100)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_INVALID_COUNTCONVERT_MODE", SWIG_From_int(static_cast< int >(20101)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_NOCAMERA", SWIG_From_int(static_cast< int >(20990)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_NOT_SUPPORTED", SWIG_From_int(static_cast< int >(20991)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_NOT_AVAILABLE", SWIG_From_int(static_cast< int >(20992)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_MAP", SWIG_From_int(static_cast< int >(20115)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_UNMAP", SWIG_From_int(static_cast< int >(20116)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_MDL", SWIG_From_int(static_cast< int >(20117)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_UNMDL", SWIG_From_int(static_cast< int >(20118)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_BUFFSIZE", SWIG_From_int(static_cast< int >(20119)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_ERROR_NOHANDLE", SWIG_From_int(static_cast< int >(20121)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_GATING_NOT_AVAILABLE", SWIG_From_int(static_cast< int >(20130)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_FPGA_VOLTAGE_ERROR", SWIG_From_int(static_cast< int >(20131)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OW_CMD_FAIL", SWIG_From_int(static_cast< int >(20150)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OWMEMORY_BAD_ADDR", SWIG_From_int(static_cast< int >(20151)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OWCMD_NOT_AVAILABLE", SWIG_From_int(static_cast< int >(20152)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OW_NO_SLAVES", SWIG_From_int(static_cast< int >(20153)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OW_NOT_INITIALIZED", SWIG_From_int(static_cast< int >(20154)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OW_ERROR_SLAVE_NUM", SWIG_From_int(static_cast< int >(20155)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_MSTIMINGS_ERROR", SWIG_From_int(static_cast< int >(20156)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_NULL_ERROR", SWIG_From_int(static_cast< int >(20173)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_PARSE_DTD_ERROR", SWIG_From_int(static_cast< int >(20174)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_DTD_VALIDATE_ERROR", SWIG_From_int(static_cast< int >(20175)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_FILE_ACCESS_ERROR", SWIG_From_int(static_cast< int >(20176)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_FILE_DOES_NOT_EXIST", SWIG_From_int(static_cast< int >(20177)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR", SWIG_From_int(static_cast< int >(20178)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_PRESET_FILE_NOT_LOADED", SWIG_From_int(static_cast< int >(20179)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_USER_FILE_NOT_LOADED", SWIG_From_int(static_cast< int >(20180)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED", SWIG_From_int(static_cast< int >(20181)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_INVALID_FILE", SWIG_From_int(static_cast< int >(20182)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_FILE_HAS_BEEN_MODIFIED", SWIG_From_int(static_cast< int >(20183)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_BUFFER_FULL", SWIG_From_int(static_cast< int >(20184)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_INVALID_STRING_LENGTH", SWIG_From_int(static_cast< int >(20185)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_INVALID_CHARS_IN_NAME", SWIG_From_int(static_cast< int >(20186)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_INVALID_NAMING", SWIG_From_int(static_cast< int >(20187)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_GET_CAMERA_ERROR", SWIG_From_int(static_cast< int >(20188)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_MODE_ALREADY_EXISTS", SWIG_From_int(static_cast< int >(20189)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_STRINGS_NOT_EQUAL", SWIG_From_int(static_cast< int >(20190)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_NO_USER_DATA", SWIG_From_int(static_cast< int >(20191)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_VALUE_NOT_SUPPORTED", SWIG_From_int(static_cast< int >(20192)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_MODE_DOES_NOT_EXIST", SWIG_From_int(static_cast< int >(20193)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_CAMERA_NOT_SUPPORTED", SWIG_From_int(static_cast< int >(20194)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_OA_FAILED_TO_GET_MODE", SWIG_From_int(static_cast< int >(20195)));
  SWIG_Tcl_SetConstantObj(interp, "DRV_PROCESSING_FAILED", SWIG_From_int(static_cast< int >(20211)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_SINGLE", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_VIDEO", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_ACCUMULATE", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_KINETIC", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_FRAMETRANSFER", SWIG_From_int(static_cast< int >(16)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_FASTKINETICS", SWIG_From_int(static_cast< int >(32)));
  SWIG_Tcl_SetConstantObj(interp, "AC_ACQMODE_OVERLAP", SWIG_From_int(static_cast< int >(64)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_FULLIMAGE", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_SUBIMAGE", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_SINGLETRACK", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_FVB", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_MULTITRACK", SWIG_From_int(static_cast< int >(16)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_RANDOMTRACK", SWIG_From_int(static_cast< int >(32)));
  SWIG_Tcl_SetConstantObj(interp, "AC_READMODE_MULTITRACKSCAN", SWIG_From_int(static_cast< int >(64)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_INTERNAL", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_EXTERNAL", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_EXTERNAL_FVB_EM", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_CONTINUOUS", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_EXTERNALSTART", SWIG_From_int(static_cast< int >(16)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_EXTERNALEXPOSURE", SWIG_From_int(static_cast< int >(32)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_INVERTED", SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_EXTERNAL_CHARGESHIFTING", SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Tcl_SetConstantObj(interp, "AC_TRIGGERMODE_BULB", SWIG_From_int(static_cast< int >(32)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_PDA", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IXON", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_ICCD", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_EMCCD", SWIG_From_int(static_cast< int >(3)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_CCD", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_ISTAR", SWIG_From_int(static_cast< int >(5)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_VIDEO", SWIG_From_int(static_cast< int >(6)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IDUS", SWIG_From_int(static_cast< int >(7)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_NEWTON", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_SURCAM", SWIG_From_int(static_cast< int >(9)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_USBICCD", SWIG_From_int(static_cast< int >(10)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_LUCA", SWIG_From_int(static_cast< int >(11)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_RESERVED", SWIG_From_int(static_cast< int >(12)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IKON", SWIG_From_int(static_cast< int >(13)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_INGAAS", SWIG_From_int(static_cast< int >(14)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IVAC", SWIG_From_int(static_cast< int >(15)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_UNPROGRAMMED", SWIG_From_int(static_cast< int >(16)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_CLARA", SWIG_From_int(static_cast< int >(17)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_USBISTAR", SWIG_From_int(static_cast< int >(18)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_SIMCAM", SWIG_From_int(static_cast< int >(19)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_NEO", SWIG_From_int(static_cast< int >(20)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IXONULTRA", SWIG_From_int(static_cast< int >(21)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_VOLMOS", SWIG_From_int(static_cast< int >(22)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IVAC_CCD", SWIG_From_int(static_cast< int >(23)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_ASPEN", SWIG_From_int(static_cast< int >(24)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_ASCENT", SWIG_From_int(static_cast< int >(25)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_ALTA", SWIG_From_int(static_cast< int >(26)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_ALTAF", SWIG_From_int(static_cast< int >(27)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_IKONXL", SWIG_From_int(static_cast< int >(28)));
  SWIG_Tcl_SetConstantObj(interp, "AC_CAMERATYPE_RES1", SWIG_From_int(static_cast< int >(29)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_8BIT", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_14BIT", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_16BIT", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_32BIT", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_MONO", SWIG_From_int(static_cast< int >(0x000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_RGB", SWIG_From_int(static_cast< int >(0x010000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_PIXELMODE_CMY", SWIG_From_int(static_cast< int >(0x020000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_VREADOUT", SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_HREADOUT", SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_TEMPERATURE", SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_MCPGAIN", SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_EMCCDGAIN", SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_BASELINECLAMP", SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_VSAMPLITUDE", SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_HIGHCAPACITY", SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_BASELINEOFFSET", SWIG_From_int(static_cast< int >(0x0100)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_PREAMPGAIN", SWIG_From_int(static_cast< int >(0x0200)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_CROPMODE", SWIG_From_int(static_cast< int >(0x0400)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_DMAPARAMETERS", SWIG_From_int(static_cast< int >(0x0800)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_HORIZONTALBIN", SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_MULTITRACKHRANGE", SWIG_From_int(static_cast< int >(0x2000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_RANDOMTRACKNOGAPS", SWIG_From_int(static_cast< int >(0x4000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_EMADVANCED", SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_GATEMODE", SWIG_From_int(static_cast< int >(0x010000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_DDGTIMES", SWIG_From_int(static_cast< int >(0x020000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_IOC", SWIG_From_int(static_cast< int >(0x040000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_INTELLIGATE", SWIG_From_int(static_cast< int >(0x080000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_INSERTION_DELAY", SWIG_From_int(static_cast< int >(0x100000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_GATESTEP", SWIG_From_int(static_cast< int >(0x200000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_GATEDELAYSTEP", SWIG_From_int(static_cast< int >(0x200000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_TRIGGERTERMINATION", SWIG_From_int(static_cast< int >(0x400000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_EXTENDEDNIR", SWIG_From_int(static_cast< int >(0x800000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_SPOOLTHREADCOUNT", SWIG_From_int(static_cast< int >(0x1000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_REGISTERPACK", SWIG_From_int(static_cast< int >(0x2000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_PRESCANS", SWIG_From_int(static_cast< int >(0x4000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_GATEWIDTHSTEP", SWIG_From_int(static_cast< int >(0x8000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_EXTENDED_CROP_MODE", SWIG_From_int(static_cast< int >(0x10000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_SUPERKINETICS", SWIG_From_int(static_cast< int >(0x20000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_TIMESCAN", SWIG_From_int(static_cast< int >(0x40000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_GAIN", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_SETFUNCTION_ICCDGAIN", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_TEMPERATURE", SWIG_From_int(static_cast< int >(0x01)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_TARGETTEMPERATURE", SWIG_From_int(static_cast< int >(0x02)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_TEMPERATURERANGE", SWIG_From_int(static_cast< int >(0x04)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_DETECTORSIZE", SWIG_From_int(static_cast< int >(0x08)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_MCPGAIN", SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_EMCCDGAIN", SWIG_From_int(static_cast< int >(0x20)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_HVFLAG", SWIG_From_int(static_cast< int >(0x40)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_GATEMODE", SWIG_From_int(static_cast< int >(0x80)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_DDGTIMES", SWIG_From_int(static_cast< int >(0x0100)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_IOC", SWIG_From_int(static_cast< int >(0x0200)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_INTELLIGATE", SWIG_From_int(static_cast< int >(0x0400)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_INSERTION_DELAY", SWIG_From_int(static_cast< int >(0x0800)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_GATESTEP", SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_GATEDELAYSTEP", SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_PHOSPHORSTATUS", SWIG_From_int(static_cast< int >(0x2000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_MCPGAINTABLE", SWIG_From_int(static_cast< int >(0x4000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_BASELINECLAMP", SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_GATEWIDTHSTEP", SWIG_From_int(static_cast< int >(0x10000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_GAIN", SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Tcl_SetConstantObj(interp, "AC_GETFUNCTION_ICCDGAIN", SWIG_From_int(static_cast< int >(0x10)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_POLLING", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_EVENTS", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_SPOOLING", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_SHUTTER", SWIG_From_int(static_cast< int >(8)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_SHUTTEREX", SWIG_From_int(static_cast< int >(16)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_EXTERNAL_I2C", SWIG_From_int(static_cast< int >(32)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_SATURATIONEVENT", SWIG_From_int(static_cast< int >(64)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_FANCONTROL", SWIG_From_int(static_cast< int >(128)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_MIDFANCONTROL", SWIG_From_int(static_cast< int >(256)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_TEMPERATUREDURINGACQUISITION", SWIG_From_int(static_cast< int >(512)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_KEEPCLEANCONTROL", SWIG_From_int(static_cast< int >(1024)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_DDGLITE", SWIG_From_int(static_cast< int >(0x0800)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_FTEXTERNALEXPOSURE", SWIG_From_int(static_cast< int >(0x1000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_KINETICEXTERNALEXPOSURE", SWIG_From_int(static_cast< int >(0x2000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_DACCONTROL", SWIG_From_int(static_cast< int >(0x4000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_METADATA", SWIG_From_int(static_cast< int >(0x8000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_IOCONTROL", SWIG_From_int(static_cast< int >(0x10000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_PHOTONCOUNTING", SWIG_From_int(static_cast< int >(0x20000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_COUNTCONVERT", SWIG_From_int(static_cast< int >(0x40000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_DUALMODE", SWIG_From_int(static_cast< int >(0x80000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_OPTACQUIRE", SWIG_From_int(static_cast< int >(0x100000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_REALTIMESPURIOUSNOISEFILTER", SWIG_From_int(static_cast< int >(0x200000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_POSTPROCESSSPURIOUSNOISEFILTER", SWIG_From_int(static_cast< int >(0x400000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_DUALPREAMPGAIN", SWIG_From_int(static_cast< int >(0x800000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_DEFECT_CORRECTION", SWIG_From_int(static_cast< int >(0x1000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_STARTOFEXPOSURE_EVENT", SWIG_From_int(static_cast< int >(0x2000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_ENDOFEXPOSURE_EVENT", SWIG_From_int(static_cast< int >(0x4000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_CAMERALINK", SWIG_From_int(static_cast< int >(0x8000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_FIFOFULL_EVENT", SWIG_From_int(static_cast< int >(0x10000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_SENSOR_PORT_CONFIGURATION", SWIG_From_int(static_cast< int >(0x20000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_SENSOR_COMPENSATION", SWIG_From_int(static_cast< int >(0x40000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_FEATURES_IRIG_SUPPORT", SWIG_From_int(static_cast< int >(0x80000000)));
  SWIG_Tcl_SetConstantObj(interp, "AC_EMGAIN_8BIT", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "AC_EMGAIN_12BIT", SWIG_From_int(static_cast< int >(2)));
  SWIG_Tcl_SetConstantObj(interp, "AC_EMGAIN_LINEAR12", SWIG_From_int(static_cast< int >(4)));
  SWIG_Tcl_SetConstantObj(interp, "AC_EMGAIN_REAL12", SWIG_From_int(static_cast< int >(8)));
  return TCL_OK;
}
SWIGEXPORT int Andorwrap_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

